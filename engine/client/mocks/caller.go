// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	big "math/big"

	common "github.com/ethereum/go-ethereum/common"

	context "context"

	engine "github.com/ethereum/go-ethereum/beacon/engine"

	enginetypes "github.com/itsdevbear/bolaris/engine/types"

	enginev1 "github.com/prysmaticlabs/prysm/v5/proto/engine/v1"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// Caller is an autogenerated mock type for the Caller type
type Caller struct {
	mock.Mock
}

type Caller_Expecter struct {
	mock *mock.Mock
}

func (_m *Caller) EXPECT() *Caller_Expecter {
	return &Caller_Expecter{mock: &_m.Mock}
}

// ExecutionBlockByHash provides a mock function with given fields: ctx, hash, withTxs
func (_m *Caller) ExecutionBlockByHash(ctx context.Context, hash common.Hash, withTxs bool) (*enginev1.ExecutionBlock, error) {
	ret := _m.Called(ctx, hash, withTxs)

	if len(ret) == 0 {
		panic("no return value specified for ExecutionBlockByHash")
	}

	var r0 *enginev1.ExecutionBlock
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash, bool) (*enginev1.ExecutionBlock, error)); ok {
		return rf(ctx, hash, withTxs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash, bool) *enginev1.ExecutionBlock); ok {
		r0 = rf(ctx, hash, withTxs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*enginev1.ExecutionBlock)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Hash, bool) error); ok {
		r1 = rf(ctx, hash, withTxs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Caller_ExecutionBlockByHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecutionBlockByHash'
type Caller_ExecutionBlockByHash_Call struct {
	*mock.Call
}

// ExecutionBlockByHash is a helper method to define mock.On call
//   - ctx context.Context
//   - hash common.Hash
//   - withTxs bool
func (_e *Caller_Expecter) ExecutionBlockByHash(ctx interface{}, hash interface{}, withTxs interface{}) *Caller_ExecutionBlockByHash_Call {
	return &Caller_ExecutionBlockByHash_Call{Call: _e.mock.On("ExecutionBlockByHash", ctx, hash, withTxs)}
}

func (_c *Caller_ExecutionBlockByHash_Call) Run(run func(ctx context.Context, hash common.Hash, withTxs bool)) *Caller_ExecutionBlockByHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.Hash), args[2].(bool))
	})
	return _c
}

func (_c *Caller_ExecutionBlockByHash_Call) Return(_a0 *enginev1.ExecutionBlock, _a1 error) *Caller_ExecutionBlockByHash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Caller_ExecutionBlockByHash_Call) RunAndReturn(run func(context.Context, common.Hash, bool) (*enginev1.ExecutionBlock, error)) *Caller_ExecutionBlockByHash_Call {
	_c.Call.Return(run)
	return _c
}

// ForkchoiceUpdated provides a mock function with given fields: ctx, state, attrs, version
func (_m *Caller) ForkchoiceUpdated(ctx context.Context, state *engine.ForkchoiceStateV1, attrs enginetypes.PayloadAttributer, version int) (*engine.PayloadID, *common.Hash, error) {
	ret := _m.Called(ctx, state, attrs, version)

	if len(ret) == 0 {
		panic("no return value specified for ForkchoiceUpdated")
	}

	var r0 *engine.PayloadID
	var r1 *common.Hash
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *engine.ForkchoiceStateV1, enginetypes.PayloadAttributer, int) (*engine.PayloadID, *common.Hash, error)); ok {
		return rf(ctx, state, attrs, version)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *engine.ForkchoiceStateV1, enginetypes.PayloadAttributer, int) *engine.PayloadID); ok {
		r0 = rf(ctx, state, attrs, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*engine.PayloadID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *engine.ForkchoiceStateV1, enginetypes.PayloadAttributer, int) *common.Hash); ok {
		r1 = rf(ctx, state, attrs, version)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*common.Hash)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *engine.ForkchoiceStateV1, enginetypes.PayloadAttributer, int) error); ok {
		r2 = rf(ctx, state, attrs, version)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Caller_ForkchoiceUpdated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForkchoiceUpdated'
type Caller_ForkchoiceUpdated_Call struct {
	*mock.Call
}

// ForkchoiceUpdated is a helper method to define mock.On call
//   - ctx context.Context
//   - state *engine.ForkchoiceStateV1
//   - attrs enginetypes.PayloadAttributer
//   - version int
func (_e *Caller_Expecter) ForkchoiceUpdated(ctx interface{}, state interface{}, attrs interface{}, version interface{}) *Caller_ForkchoiceUpdated_Call {
	return &Caller_ForkchoiceUpdated_Call{Call: _e.mock.On("ForkchoiceUpdated", ctx, state, attrs, version)}
}

func (_c *Caller_ForkchoiceUpdated_Call) Run(run func(ctx context.Context, state *engine.ForkchoiceStateV1, attrs enginetypes.PayloadAttributer, version int)) *Caller_ForkchoiceUpdated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*engine.ForkchoiceStateV1), args[2].(enginetypes.PayloadAttributer), args[3].(int))
	})
	return _c
}

func (_c *Caller_ForkchoiceUpdated_Call) Return(_a0 *engine.PayloadID, _a1 *common.Hash, _a2 error) *Caller_ForkchoiceUpdated_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *Caller_ForkchoiceUpdated_Call) RunAndReturn(run func(context.Context, *engine.ForkchoiceStateV1, enginetypes.PayloadAttributer, int) (*engine.PayloadID, *common.Hash, error)) *Caller_ForkchoiceUpdated_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogs provides a mock function with given fields: ctx, blockHash, addresses
func (_m *Caller) GetLogs(ctx context.Context, blockHash common.Hash, addresses []common.Address) ([]types.Log, error) {
	ret := _m.Called(ctx, blockHash, addresses)

	if len(ret) == 0 {
		panic("no return value specified for GetLogs")
	}

	var r0 []types.Log
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash, []common.Address) ([]types.Log, error)); ok {
		return rf(ctx, blockHash, addresses)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash, []common.Address) []types.Log); ok {
		r0 = rf(ctx, blockHash, addresses)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Log)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Hash, []common.Address) error); ok {
		r1 = rf(ctx, blockHash, addresses)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Caller_GetLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogs'
type Caller_GetLogs_Call struct {
	*mock.Call
}

// GetLogs is a helper method to define mock.On call
//   - ctx context.Context
//   - blockHash common.Hash
//   - addresses []common.Address
func (_e *Caller_Expecter) GetLogs(ctx interface{}, blockHash interface{}, addresses interface{}) *Caller_GetLogs_Call {
	return &Caller_GetLogs_Call{Call: _e.mock.On("GetLogs", ctx, blockHash, addresses)}
}

func (_c *Caller_GetLogs_Call) Run(run func(ctx context.Context, blockHash common.Hash, addresses []common.Address)) *Caller_GetLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.Hash), args[2].([]common.Address))
	})
	return _c
}

func (_c *Caller_GetLogs_Call) Return(_a0 []types.Log, _a1 error) *Caller_GetLogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Caller_GetLogs_Call) RunAndReturn(run func(context.Context, common.Hash, []common.Address) ([]types.Log, error)) *Caller_GetLogs_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogsInRange provides a mock function with given fields: ctx, fromBlock, toBlock, addresses
func (_m *Caller) GetLogsInRange(ctx context.Context, fromBlock uint64, toBlock uint64, addresses []common.Address) ([]types.Log, error) {
	ret := _m.Called(ctx, fromBlock, toBlock, addresses)

	if len(ret) == 0 {
		panic("no return value specified for GetLogsInRange")
	}

	var r0 []types.Log
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64, []common.Address) ([]types.Log, error)); ok {
		return rf(ctx, fromBlock, toBlock, addresses)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64, []common.Address) []types.Log); ok {
		r0 = rf(ctx, fromBlock, toBlock, addresses)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Log)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, uint64, []common.Address) error); ok {
		r1 = rf(ctx, fromBlock, toBlock, addresses)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Caller_GetLogsInRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogsInRange'
type Caller_GetLogsInRange_Call struct {
	*mock.Call
}

// GetLogsInRange is a helper method to define mock.On call
//   - ctx context.Context
//   - fromBlock uint64
//   - toBlock uint64
//   - addresses []common.Address
func (_e *Caller_Expecter) GetLogsInRange(ctx interface{}, fromBlock interface{}, toBlock interface{}, addresses interface{}) *Caller_GetLogsInRange_Call {
	return &Caller_GetLogsInRange_Call{Call: _e.mock.On("GetLogsInRange", ctx, fromBlock, toBlock, addresses)}
}

func (_c *Caller_GetLogsInRange_Call) Run(run func(ctx context.Context, fromBlock uint64, toBlock uint64, addresses []common.Address)) *Caller_GetLogsInRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(uint64), args[3].([]common.Address))
	})
	return _c
}

func (_c *Caller_GetLogsInRange_Call) Return(_a0 []types.Log, _a1 error) *Caller_GetLogsInRange_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Caller_GetLogsInRange_Call) RunAndReturn(run func(context.Context, uint64, uint64, []common.Address) ([]types.Log, error)) *Caller_GetLogsInRange_Call {
	_c.Call.Return(run)
	return _c
}

// GetPayload provides a mock function with given fields: ctx, payloadID, version
func (_m *Caller) GetPayload(ctx context.Context, payloadID engine.PayloadID, version int) (enginetypes.ExecutionPayload, *enginev1.BlobsBundle, bool, error) {
	ret := _m.Called(ctx, payloadID, version)

	if len(ret) == 0 {
		panic("no return value specified for GetPayload")
	}

	var r0 enginetypes.ExecutionPayload
	var r1 *enginev1.BlobsBundle
	var r2 bool
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, engine.PayloadID, int) (enginetypes.ExecutionPayload, *enginev1.BlobsBundle, bool, error)); ok {
		return rf(ctx, payloadID, version)
	}
	if rf, ok := ret.Get(0).(func(context.Context, engine.PayloadID, int) enginetypes.ExecutionPayload); ok {
		r0 = rf(ctx, payloadID, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(enginetypes.ExecutionPayload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, engine.PayloadID, int) *enginev1.BlobsBundle); ok {
		r1 = rf(ctx, payloadID, version)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*enginev1.BlobsBundle)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, engine.PayloadID, int) bool); ok {
		r2 = rf(ctx, payloadID, version)
	} else {
		r2 = ret.Get(2).(bool)
	}

	if rf, ok := ret.Get(3).(func(context.Context, engine.PayloadID, int) error); ok {
		r3 = rf(ctx, payloadID, version)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// Caller_GetPayload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPayload'
type Caller_GetPayload_Call struct {
	*mock.Call
}

// GetPayload is a helper method to define mock.On call
//   - ctx context.Context
//   - payloadID engine.PayloadID
//   - version int
func (_e *Caller_Expecter) GetPayload(ctx interface{}, payloadID interface{}, version interface{}) *Caller_GetPayload_Call {
	return &Caller_GetPayload_Call{Call: _e.mock.On("GetPayload", ctx, payloadID, version)}
}

func (_c *Caller_GetPayload_Call) Run(run func(ctx context.Context, payloadID engine.PayloadID, version int)) *Caller_GetPayload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(engine.PayloadID), args[2].(int))
	})
	return _c
}

func (_c *Caller_GetPayload_Call) Return(_a0 enginetypes.ExecutionPayload, _a1 *enginev1.BlobsBundle, _a2 bool, _a3 error) *Caller_GetPayload_Call {
	_c.Call.Return(_a0, _a1, _a2, _a3)
	return _c
}

func (_c *Caller_GetPayload_Call) RunAndReturn(run func(context.Context, engine.PayloadID, int) (enginetypes.ExecutionPayload, *enginev1.BlobsBundle, bool, error)) *Caller_GetPayload_Call {
	_c.Call.Return(run)
	return _c
}

// HeaderByHash provides a mock function with given fields: ctx, hash
func (_m *Caller) HeaderByHash(ctx context.Context, hash common.Hash) (*types.Header, error) {
	ret := _m.Called(ctx, hash)

	if len(ret) == 0 {
		panic("no return value specified for HeaderByHash")
	}

	var r0 *types.Header
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) (*types.Header, error)); ok {
		return rf(ctx, hash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) *types.Header); ok {
		r0 = rf(ctx, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Header)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Hash) error); ok {
		r1 = rf(ctx, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Caller_HeaderByHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeaderByHash'
type Caller_HeaderByHash_Call struct {
	*mock.Call
}

// HeaderByHash is a helper method to define mock.On call
//   - ctx context.Context
//   - hash common.Hash
func (_e *Caller_Expecter) HeaderByHash(ctx interface{}, hash interface{}) *Caller_HeaderByHash_Call {
	return &Caller_HeaderByHash_Call{Call: _e.mock.On("HeaderByHash", ctx, hash)}
}

func (_c *Caller_HeaderByHash_Call) Run(run func(ctx context.Context, hash common.Hash)) *Caller_HeaderByHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.Hash))
	})
	return _c
}

func (_c *Caller_HeaderByHash_Call) Return(_a0 *types.Header, _a1 error) *Caller_HeaderByHash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Caller_HeaderByHash_Call) RunAndReturn(run func(context.Context, common.Hash) (*types.Header, error)) *Caller_HeaderByHash_Call {
	_c.Call.Return(run)
	return _c
}

// HeaderByNumber provides a mock function with given fields: ctx, number
func (_m *Caller) HeaderByNumber(ctx context.Context, number *big.Int) (*types.Header, error) {
	ret := _m.Called(ctx, number)

	if len(ret) == 0 {
		panic("no return value specified for HeaderByNumber")
	}

	var r0 *types.Header
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *big.Int) (*types.Header, error)); ok {
		return rf(ctx, number)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *big.Int) *types.Header); ok {
		r0 = rf(ctx, number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Header)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *big.Int) error); ok {
		r1 = rf(ctx, number)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Caller_HeaderByNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeaderByNumber'
type Caller_HeaderByNumber_Call struct {
	*mock.Call
}

// HeaderByNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - number *big.Int
func (_e *Caller_Expecter) HeaderByNumber(ctx interface{}, number interface{}) *Caller_HeaderByNumber_Call {
	return &Caller_HeaderByNumber_Call{Call: _e.mock.On("HeaderByNumber", ctx, number)}
}

func (_c *Caller_HeaderByNumber_Call) Run(run func(ctx context.Context, number *big.Int)) *Caller_HeaderByNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*big.Int))
	})
	return _c
}

func (_c *Caller_HeaderByNumber_Call) Return(_a0 *types.Header, _a1 error) *Caller_HeaderByNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Caller_HeaderByNumber_Call) RunAndReturn(run func(context.Context, *big.Int) (*types.Header, error)) *Caller_HeaderByNumber_Call {
	_c.Call.Return(run)
	return _c
}

// NewPayload provides a mock function with given fields: ctx, payload, versionedHashes, parentBlockRoot
func (_m *Caller) NewPayload(ctx context.Context, payload enginetypes.ExecutionPayload, versionedHashes []common.Hash, parentBlockRoot *[32]byte) (*common.Hash, error) {
	ret := _m.Called(ctx, payload, versionedHashes, parentBlockRoot)

	if len(ret) == 0 {
		panic("no return value specified for NewPayload")
	}

	var r0 *common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, enginetypes.ExecutionPayload, []common.Hash, *[32]byte) (*common.Hash, error)); ok {
		return rf(ctx, payload, versionedHashes, parentBlockRoot)
	}
	if rf, ok := ret.Get(0).(func(context.Context, enginetypes.ExecutionPayload, []common.Hash, *[32]byte) *common.Hash); ok {
		r0 = rf(ctx, payload, versionedHashes, parentBlockRoot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, enginetypes.ExecutionPayload, []common.Hash, *[32]byte) error); ok {
		r1 = rf(ctx, payload, versionedHashes, parentBlockRoot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Caller_NewPayload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewPayload'
type Caller_NewPayload_Call struct {
	*mock.Call
}

// NewPayload is a helper method to define mock.On call
//   - ctx context.Context
//   - payload enginetypes.ExecutionPayload
//   - versionedHashes []common.Hash
//   - parentBlockRoot *[32]byte
func (_e *Caller_Expecter) NewPayload(ctx interface{}, payload interface{}, versionedHashes interface{}, parentBlockRoot interface{}) *Caller_NewPayload_Call {
	return &Caller_NewPayload_Call{Call: _e.mock.On("NewPayload", ctx, payload, versionedHashes, parentBlockRoot)}
}

func (_c *Caller_NewPayload_Call) Run(run func(ctx context.Context, payload enginetypes.ExecutionPayload, versionedHashes []common.Hash, parentBlockRoot *[32]byte)) *Caller_NewPayload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(enginetypes.ExecutionPayload), args[2].([]common.Hash), args[3].(*[32]byte))
	})
	return _c
}

func (_c *Caller_NewPayload_Call) Return(_a0 *common.Hash, _a1 error) *Caller_NewPayload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Caller_NewPayload_Call) RunAndReturn(run func(context.Context, enginetypes.ExecutionPayload, []common.Hash, *[32]byte) (*common.Hash, error)) *Caller_NewPayload_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: _a0
func (_m *Caller) Start(_a0 context.Context) {
	_m.Called(_a0)
}

// Caller_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type Caller_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Caller_Expecter) Start(_a0 interface{}) *Caller_Start_Call {
	return &Caller_Start_Call{Call: _e.mock.On("Start", _a0)}
}

func (_c *Caller_Start_Call) Run(run func(_a0 context.Context)) *Caller_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Caller_Start_Call) Return() *Caller_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *Caller_Start_Call) RunAndReturn(run func(context.Context)) *Caller_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function with given fields:
func (_m *Caller) Status() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Caller_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type Caller_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
func (_e *Caller_Expecter) Status() *Caller_Status_Call {
	return &Caller_Status_Call{Call: _e.mock.On("Status")}
}

func (_c *Caller_Status_Call) Run(run func()) *Caller_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Caller_Status_Call) Return(_a0 error) *Caller_Status_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Caller_Status_Call) RunAndReturn(run func() error) *Caller_Status_Call {
	_c.Call.Return(run)
	return _c
}

// NewCaller creates a new instance of Caller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCaller(t interface {
	mock.TestingT
	Cleanup(func())
}) *Caller {
	mock := &Caller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// BeaconKitConfig is an autogenerated mock type for the BeaconKitConfig type
type BeaconKitConfig[T interface{}] struct {
	mock.Mock
}

type BeaconKitConfig_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *BeaconKitConfig[T]) EXPECT() *BeaconKitConfig_Expecter[T] {
	return &BeaconKitConfig_Expecter[T]{mock: &_m.Mock}
}

// Template provides a mock function with given fields:
func (_m *BeaconKitConfig[T]) Template() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Template")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// BeaconKitConfig_Template_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Template'
type BeaconKitConfig_Template_Call[T interface{}] struct {
	*mock.Call
}

// Template is a helper method to define mock.On call
func (_e *BeaconKitConfig_Expecter[T]) Template() *BeaconKitConfig_Template_Call[T] {
	return &BeaconKitConfig_Template_Call[T]{Call: _e.mock.On("Template")}
}

func (_c *BeaconKitConfig_Template_Call[T]) Run(run func()) *BeaconKitConfig_Template_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BeaconKitConfig_Template_Call[T]) Return(_a0 string) *BeaconKitConfig_Template_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconKitConfig_Template_Call[T]) RunAndReturn(run func() string) *BeaconKitConfig_Template_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewBeaconKitConfig creates a new instance of BeaconKitConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBeaconKitConfig[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *BeaconKitConfig[T] {
	mock := &BeaconKitConfig[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

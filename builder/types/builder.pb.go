// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: builder/v1alpha1/builder.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	capella "github.com/itsdevbear/bolaris/types/consensus/v1/capella"
	_ "github.com/prysmaticlabs/prysm/v4/proto/eth/ext"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RequestBestBlockRequest is the request to the RequestBestBlock RPC.
type RequestBestBlockRequest struct {
	// slot is the slot of the block to request.
	Slot uint64 `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	// blinded is true if the block should be blinded.
	Blinded bool `protobuf:"varint,2,opt,name=blinded,proto3" json:"blinded,omitempty"`
}

func (m *RequestBestBlockRequest) Reset()         { *m = RequestBestBlockRequest{} }
func (m *RequestBestBlockRequest) String() string { return proto.CompactTextString(m) }
func (*RequestBestBlockRequest) ProtoMessage()    {}
func (*RequestBestBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89ef855319332ad, []int{0}
}
func (m *RequestBestBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestBestBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestBestBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestBestBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestBestBlockRequest.Merge(m, src)
}
func (m *RequestBestBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *RequestBestBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestBestBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RequestBestBlockRequest proto.InternalMessageInfo

func (m *RequestBestBlockRequest) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *RequestBestBlockRequest) GetBlinded() bool {
	if m != nil {
		return m.Blinded
	}
	return false
}

// RequestBestBlockResponse is the response to the RequestBestBlock RPC.
type RequestBestBlockResponse struct {
	// block is the best available block from the builder.
	Block *capella.BeaconKitBlockCapella `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (m *RequestBestBlockResponse) Reset()         { *m = RequestBestBlockResponse{} }
func (m *RequestBestBlockResponse) String() string { return proto.CompactTextString(m) }
func (*RequestBestBlockResponse) ProtoMessage()    {}
func (*RequestBestBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89ef855319332ad, []int{1}
}
func (m *RequestBestBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestBestBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestBestBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestBestBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestBestBlockResponse.Merge(m, src)
}
func (m *RequestBestBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *RequestBestBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestBestBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RequestBestBlockResponse proto.InternalMessageInfo

func (m *RequestBestBlockResponse) GetBlock() *capella.BeaconKitBlockCapella {
	if m != nil {
		return m.Block
	}
	return nil
}

func init() {
	proto.RegisterType((*RequestBestBlockRequest)(nil), "builder.v1alpha1.RequestBestBlockRequest")
	proto.RegisterType((*RequestBestBlockResponse)(nil), "builder.v1alpha1.RequestBestBlockResponse")
}

func init() { proto.RegisterFile("builder/v1alpha1/builder.proto", fileDescriptor_c89ef855319332ad) }

var fileDescriptor_c89ef855319332ad = []byte{
	// 341 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xbd, 0x4a, 0xc3, 0x40,
	0x1c, 0x6f, 0xa4, 0x7e, 0x70, 0x82, 0x94, 0x2c, 0x86, 0x0e, 0x47, 0xe9, 0x20, 0x55, 0xe1, 0x8e,
	0xd4, 0xd9, 0xc1, 0x88, 0x38, 0xb8, 0xa5, 0xb8, 0xb8, 0xe5, 0x2e, 0x7f, 0xcc, 0xe1, 0x35, 0x77,
	0xde, 0x5d, 0x82, 0xe2, 0xe6, 0xe8, 0xe4, 0xcb, 0xf8, 0x0e, 0x8e, 0x1d, 0x1d, 0xa5, 0x7d, 0x11,
	0x69, 0xae, 0x71, 0xa8, 0x28, 0x0e, 0x19, 0xfe, 0x5f, 0xbf, 0xaf, 0x1c, 0xc2, 0xac, 0x12, 0x32,
	0x07, 0x43, 0xeb, 0x38, 0x93, 0xba, 0xc8, 0x62, 0xba, 0x6a, 0x10, 0x6d, 0x94, 0x53, 0x61, 0xaf,
	0x2d, 0xdb, 0x79, 0x1f, 0x83, 0x2b, 0xc0, 0x40, 0x35, 0xa5, 0xe0, 0x0a, 0x0a, 0x0f, 0x8e, 0x2a,
	0xed, 0x84, 0x2a, 0xad, 0xbf, 0xe8, 0x1f, 0xb8, 0x47, 0x0d, 0x96, 0x72, 0x55, 0x5a, 0x28, 0x6d,
	0x65, 0x69, 0x1d, 0x53, 0x9e, 0x69, 0x90, 0x32, 0xa3, 0x4c, 0x2a, 0x7e, 0xe7, 0xf7, 0x86, 0x2f,
	0x01, 0xda, 0x4f, 0xe1, 0xbe, 0x02, 0xeb, 0x92, 0xe5, 0xb7, 0x1c, 0xad, 0xea, 0xf0, 0x1a, 0x75,
	0xad, 0x54, 0x2e, 0x0a, 0x06, 0xc1, 0xa8, 0x9b, 0x9c, 0x3d, 0xbf, 0x45, 0xa7, 0xb7, 0xc2, 0x15,
	0x15, 0x23, 0x5c, 0x4d, 0xa9, 0x70, 0x36, 0x87, 0x9a, 0x41, 0x66, 0x28, 0x53, 0x32, 0x33, 0xc2,
	0xd2, 0x75, 0x4e, 0x6d, 0xc4, 0x54, 0x38, 0x51, 0x83, 0x25, 0x13, 0xa9, 0x5c, 0xda, 0xc0, 0x85,
	0x11, 0xda, 0x66, 0x52, 0x94, 0x39, 0xe4, 0xd1, 0xc6, 0x20, 0x18, 0xed, 0xa4, 0x6d, 0x39, 0xe4,
	0x28, 0xfa, 0xa9, 0xc5, 0xea, 0x25, 0x5e, 0x78, 0x89, 0x36, 0x1b, 0xdd, 0x8d, 0x9a, 0xdd, 0x71,
	0x4c, 0x1a, 0x32, 0xf2, 0x4d, 0x46, 0xea, 0x98, 0xac, 0x0c, 0x92, 0x04, 0x32, 0xae, 0xca, 0x2b,
	0xe1, 0x21, 0xce, 0x7d, 0x37, 0xf5, 0xf7, 0xe3, 0x27, 0xb4, 0x97, 0xf8, 0x34, 0x27, 0x60, 0x6a,
	0xc1, 0x21, 0x14, 0xa8, 0xb7, 0x4e, 0x1b, 0x1e, 0x92, 0xf5, 0xc8, 0xc9, 0x2f, 0x31, 0xf5, 0x8f,
	0xfe, 0xb3, 0xea, 0x5d, 0x24, 0x17, 0xef, 0x73, 0x1c, 0xcc, 0xe6, 0x38, 0xf8, 0x9c, 0xe3, 0xe0,
	0x75, 0x81, 0x3b, 0xb3, 0x05, 0xee, 0x7c, 0x2c, 0x70, 0xe7, 0xe6, 0xf8, 0xef, 0x68, 0xdb, 0x07,
	0xd2, 0xb8, 0x66, 0x5b, 0xcd, 0xcf, 0x3b, 0xf9, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x88, 0xcf, 0x3b,
	0x96, 0x38, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BuilderServiceClient is the client API for BuilderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BuilderServiceClient interface {
	// RequestBestBlock requests the best available block from the builder.
	RequestBestBlock(ctx context.Context, in *RequestBestBlockRequest, opts ...grpc.CallOption) (*RequestBestBlockResponse, error)
}

type builderServiceClient struct {
	cc grpc1.ClientConn
}

func NewBuilderServiceClient(cc grpc1.ClientConn) BuilderServiceClient {
	return &builderServiceClient{cc}
}

func (c *builderServiceClient) RequestBestBlock(ctx context.Context, in *RequestBestBlockRequest, opts ...grpc.CallOption) (*RequestBestBlockResponse, error) {
	out := new(RequestBestBlockResponse)
	err := c.cc.Invoke(ctx, "/builder.v1alpha1.BuilderService/RequestBestBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuilderServiceServer is the server API for BuilderService service.
type BuilderServiceServer interface {
	// RequestBestBlock requests the best available block from the builder.
	RequestBestBlock(context.Context, *RequestBestBlockRequest) (*RequestBestBlockResponse, error)
}

// UnimplementedBuilderServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBuilderServiceServer struct {
}

func (*UnimplementedBuilderServiceServer) RequestBestBlock(ctx context.Context, req *RequestBestBlockRequest) (*RequestBestBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestBestBlock not implemented")
}

func RegisterBuilderServiceServer(s grpc1.Server, srv BuilderServiceServer) {
	s.RegisterService(&_BuilderService_serviceDesc, srv)
}

func _BuilderService_RequestBestBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestBestBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServiceServer).RequestBestBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/builder.v1alpha1.BuilderService/RequestBestBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServiceServer).RequestBestBlock(ctx, req.(*RequestBestBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BuilderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "builder.v1alpha1.BuilderService",
	HandlerType: (*BuilderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestBestBlock",
			Handler:    _BuilderService_RequestBestBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "builder/v1alpha1/builder.proto",
}

func (m *RequestBestBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestBestBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestBestBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Blinded {
		i--
		if m.Blinded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Slot != 0 {
		i = encodeVarintBuilder(dAtA, i, uint64(m.Slot))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestBestBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestBestBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestBestBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Block != nil {
		{
			size, err := m.Block.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBuilder(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBuilder(dAtA []byte, offset int, v uint64) int {
	offset -= sovBuilder(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RequestBestBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slot != 0 {
		n += 1 + sovBuilder(uint64(m.Slot))
	}
	if m.Blinded {
		n += 2
	}
	return n
}

func (m *RequestBestBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovBuilder(uint64(l))
	}
	return n
}

func sovBuilder(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBuilder(x uint64) (n int) {
	return sovBuilder(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RequestBestBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuilder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestBestBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestBestBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blinded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Blinded = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBuilder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuilder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestBestBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuilder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestBestBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestBestBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuilder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBuilder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Block == nil {
				m.Block = &capella.BeaconKitBlockCapella{}
			}
			if err := m.Block.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuilder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBuilder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBuilder(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBuilder
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBuilder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBuilder
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBuilder
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBuilder
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBuilder        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBuilder          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBuilder = fmt.Errorf("proto: unexpected end of group")
)

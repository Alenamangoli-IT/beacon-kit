// Since: cosmos-sdk 0.46

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: runtime/modules/beacon/v1alpha1/query.proto

package beaconv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Querier_FinalizedEth1Block_FullMethodName = "/runtime.modules.beacon.v1alpha1.Querier/FinalizedEth1Block"
)

// QuerierClient is the client API for Querier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuerierClient interface {
	// FinalizedEth1Block queries the valid voting options for a proposal.
	FinalizedEth1Block(ctx context.Context, in *FinalizedEth1BlockRequest, opts ...grpc.CallOption) (*FinalizedEth1BlockResponse, error)
}

type querierClient struct {
	cc grpc.ClientConnInterface
}

func NewQuerierClient(cc grpc.ClientConnInterface) QuerierClient {
	return &querierClient{cc}
}

func (c *querierClient) FinalizedEth1Block(ctx context.Context, in *FinalizedEth1BlockRequest, opts ...grpc.CallOption) (*FinalizedEth1BlockResponse, error) {
	out := new(FinalizedEth1BlockResponse)
	err := c.cc.Invoke(ctx, Querier_FinalizedEth1Block_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuerierServer is the server API for Querier service.
// All implementations must embed UnimplementedQuerierServer
// for forward compatibility
type QuerierServer interface {
	// FinalizedEth1Block queries the valid voting options for a proposal.
	FinalizedEth1Block(context.Context, *FinalizedEth1BlockRequest) (*FinalizedEth1BlockResponse, error)
	mustEmbedUnimplementedQuerierServer()
}

// UnimplementedQuerierServer must be embedded to have forward compatible implementations.
type UnimplementedQuerierServer struct {
}

func (UnimplementedQuerierServer) FinalizedEth1Block(context.Context, *FinalizedEth1BlockRequest) (*FinalizedEth1BlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizedEth1Block not implemented")
}
func (UnimplementedQuerierServer) mustEmbedUnimplementedQuerierServer() {}

// UnsafeQuerierServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuerierServer will
// result in compilation errors.
type UnsafeQuerierServer interface {
	mustEmbedUnimplementedQuerierServer()
}

func RegisterQuerierServer(s grpc.ServiceRegistrar, srv QuerierServer) {
	s.RegisterService(&Querier_ServiceDesc, srv)
}

func _Querier_FinalizedEth1Block_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizedEth1BlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuerierServer).FinalizedEth1Block(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Querier_FinalizedEth1Block_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuerierServer).FinalizedEth1Block(ctx, req.(*FinalizedEth1BlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Querier_ServiceDesc is the grpc.ServiceDesc for Querier service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Querier_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "runtime.modules.beacon.v1alpha1.Querier",
	HandlerType: (*QuerierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FinalizedEth1Block",
			Handler:    _Querier_FinalizedEth1Block_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "runtime/modules/beacon/v1alpha1/query.proto",
}

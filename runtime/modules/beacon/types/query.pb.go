// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: runtime/modules/beacon/v1alpha1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// FinalizedEth1BlockRequest is the request type for the Query/Constitution RPC method
type FinalizedEth1BlockRequest struct {
}

func (m *FinalizedEth1BlockRequest) Reset()         { *m = FinalizedEth1BlockRequest{} }
func (m *FinalizedEth1BlockRequest) String() string { return proto.CompactTextString(m) }
func (*FinalizedEth1BlockRequest) ProtoMessage()    {}
func (*FinalizedEth1BlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9c1460636d2f34b, []int{0}
}
func (m *FinalizedEth1BlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FinalizedEth1BlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FinalizedEth1BlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FinalizedEth1BlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinalizedEth1BlockRequest.Merge(m, src)
}
func (m *FinalizedEth1BlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *FinalizedEth1BlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FinalizedEth1BlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FinalizedEth1BlockRequest proto.InternalMessageInfo

// FinalizedEth1BlockResponse is the response type for the Query/Constitution RPC method
type FinalizedEth1BlockResponse struct {
	Eth1BlockHash string `protobuf:"bytes,1,opt,name=eth1_block_hash,json=eth1BlockHash,proto3" json:"eth1_block_hash,omitempty"`
}

func (m *FinalizedEth1BlockResponse) Reset()         { *m = FinalizedEth1BlockResponse{} }
func (m *FinalizedEth1BlockResponse) String() string { return proto.CompactTextString(m) }
func (*FinalizedEth1BlockResponse) ProtoMessage()    {}
func (*FinalizedEth1BlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9c1460636d2f34b, []int{1}
}
func (m *FinalizedEth1BlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FinalizedEth1BlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FinalizedEth1BlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FinalizedEth1BlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinalizedEth1BlockResponse.Merge(m, src)
}
func (m *FinalizedEth1BlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *FinalizedEth1BlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FinalizedEth1BlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FinalizedEth1BlockResponse proto.InternalMessageInfo

func (m *FinalizedEth1BlockResponse) GetEth1BlockHash() string {
	if m != nil {
		return m.Eth1BlockHash
	}
	return ""
}

func init() {
	proto.RegisterType((*FinalizedEth1BlockRequest)(nil), "runtime.modules.beacon.v1alpha1.FinalizedEth1BlockRequest")
	proto.RegisterType((*FinalizedEth1BlockResponse)(nil), "runtime.modules.beacon.v1alpha1.FinalizedEth1BlockResponse")
}

func init() {
	proto.RegisterFile("runtime/modules/beacon/v1alpha1/query.proto", fileDescriptor_f9c1460636d2f34b)
}

var fileDescriptor_f9c1460636d2f34b = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xbf, 0x4a, 0x83, 0x31,
	0x14, 0xc5, 0x1b, 0x07, 0xc5, 0x0f, 0x44, 0xc8, 0xa4, 0x55, 0xa2, 0x74, 0x10, 0x41, 0x4c, 0xf8,
	0x74, 0x10, 0xea, 0x56, 0x54, 0x5c, 0x2d, 0x4e, 0x2e, 0x25, 0x69, 0xaf, 0x4d, 0x68, 0x9a, 0xfb,
	0x35, 0x7f, 0x0a, 0x75, 0xf4, 0x09, 0x04, 0xdf, 0x49, 0x1c, 0x8b, 0x2e, 0x8e, 0xd2, 0xfa, 0x20,
	0xa2, 0x6d, 0x11, 0xd4, 0x22, 0xb8, 0xde, 0xfb, 0x3b, 0x97, 0x7b, 0xce, 0xc9, 0xf6, 0x7c, 0x72,
	0xd1, 0x74, 0x41, 0x74, 0xb1, 0x95, 0x2c, 0x04, 0xa1, 0x40, 0x36, 0xd1, 0x89, 0x7e, 0x2e, 0x6d,
	0xa1, 0x65, 0x2e, 0x7a, 0x09, 0xfc, 0x80, 0x17, 0x1e, 0x23, 0xd2, 0xad, 0x29, 0xcc, 0xa7, 0x30,
	0x9f, 0xc0, 0x7c, 0x06, 0x97, 0x37, 0xdb, 0x88, 0x6d, 0x0b, 0x42, 0x16, 0x46, 0x48, 0xe7, 0x30,
	0xca, 0x68, 0xd0, 0x85, 0x89, 0xbc, 0xb2, 0x91, 0xad, 0x9f, 0x19, 0x27, 0xad, 0xb9, 0x81, 0xd6,
	0x69, 0xd4, 0x79, 0xcd, 0x62, 0xb3, 0x53, 0x87, 0x5e, 0x82, 0x10, 0x2b, 0x27, 0x59, 0xf9, 0xb7,
	0x65, 0x28, 0xd0, 0x05, 0xa0, 0x3b, 0xd9, 0x2a, 0x44, 0x9d, 0x37, 0xd4, 0xc7, 0xb4, 0xa1, 0x65,
	0xd0, 0x6b, 0x64, 0x9b, 0xec, 0x2e, 0xd7, 0x57, 0x60, 0xc6, 0x9e, 0xcb, 0xa0, 0x0f, 0x9e, 0x48,
	0xb6, 0x74, 0x91, 0xc0, 0x1b, 0xf0, 0xf4, 0x81, 0x64, 0xf4, 0xe7, 0x49, 0x5a, 0xe5, 0x7f, 0xb8,
	0xe0, 0x73, 0x9f, 0x2c, 0x1f, 0xff, 0x4b, 0x3b, 0xf1, 0x50, 0x39, 0xba, 0x7d, 0x7e, 0xbb, 0x5f,
	0xc8, 0xa9, 0x98, 0x66, 0xbc, 0xdf, 0x31, 0xf1, 0x5b, 0xdc, 0xe2, 0x7a, 0x26, 0x6f, 0x7c, 0xd9,
	0xad, 0x5d, 0x3e, 0x8e, 0x18, 0x19, 0x8e, 0x18, 0x79, 0x1d, 0x31, 0x72, 0x37, 0x66, 0xa5, 0xe1,
	0x98, 0x95, 0x5e, 0xc6, 0xac, 0x74, 0x55, 0x6d, 0x9b, 0xa8, 0x93, 0xe2, 0x4d, 0xec, 0x0a, 0x13,
	0x43, 0x0b, 0xfa, 0x0a, 0xa4, 0x17, 0x0a, 0xad, 0xf4, 0x26, 0x88, 0x39, 0xdd, 0xc6, 0x41, 0x01,
	0x41, 0x2d, 0x7e, 0x96, 0x72, 0xf8, 0x1e, 0x00, 0x00, 0xff, 0xff, 0xef, 0x46, 0x57, 0xe1, 0x02,
	0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QuerierClient is the client API for Querier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QuerierClient interface {
	// FinalizedEth1Block queries the valid voting options for a proposal.
	FinalizedEth1Block(ctx context.Context, in *FinalizedEth1BlockRequest, opts ...grpc.CallOption) (*FinalizedEth1BlockResponse, error)
}

type querierClient struct {
	cc grpc1.ClientConn
}

func NewQuerierClient(cc grpc1.ClientConn) QuerierClient {
	return &querierClient{cc}
}

func (c *querierClient) FinalizedEth1Block(ctx context.Context, in *FinalizedEth1BlockRequest, opts ...grpc.CallOption) (*FinalizedEth1BlockResponse, error) {
	out := new(FinalizedEth1BlockResponse)
	err := c.cc.Invoke(ctx, "/runtime.modules.beacon.v1alpha1.Querier/FinalizedEth1Block", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuerierServer is the server API for Querier service.
type QuerierServer interface {
	// FinalizedEth1Block queries the valid voting options for a proposal.
	FinalizedEth1Block(context.Context, *FinalizedEth1BlockRequest) (*FinalizedEth1BlockResponse, error)
}

// UnimplementedQuerierServer can be embedded to have forward compatible implementations.
type UnimplementedQuerierServer struct {
}

func (*UnimplementedQuerierServer) FinalizedEth1Block(ctx context.Context, req *FinalizedEth1BlockRequest) (*FinalizedEth1BlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizedEth1Block not implemented")
}

func RegisterQuerierServer(s grpc1.Server, srv QuerierServer) {
	s.RegisterService(&_Querier_serviceDesc, srv)
}

func _Querier_FinalizedEth1Block_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizedEth1BlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuerierServer).FinalizedEth1Block(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runtime.modules.beacon.v1alpha1.Querier/FinalizedEth1Block",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuerierServer).FinalizedEth1Block(ctx, req.(*FinalizedEth1BlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Querier_serviceDesc = grpc.ServiceDesc{
	ServiceName: "runtime.modules.beacon.v1alpha1.Querier",
	HandlerType: (*QuerierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FinalizedEth1Block",
			Handler:    _Querier_FinalizedEth1Block_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "runtime/modules/beacon/v1alpha1/query.proto",
}

func (m *FinalizedEth1BlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinalizedEth1BlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FinalizedEth1BlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *FinalizedEth1BlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinalizedEth1BlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FinalizedEth1BlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Eth1BlockHash) > 0 {
		i -= len(m.Eth1BlockHash)
		copy(dAtA[i:], m.Eth1BlockHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Eth1BlockHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FinalizedEth1BlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *FinalizedEth1BlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Eth1BlockHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FinalizedEth1BlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinalizedEth1BlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinalizedEth1BlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FinalizedEth1BlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinalizedEth1BlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinalizedEth1BlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eth1BlockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Eth1BlockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)

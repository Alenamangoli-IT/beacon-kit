// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	state "github.com/itsdevbear/bolaris/beacon/state"
)

// BeaconStateProvider is an autogenerated mock type for the BeaconStateProvider type
type BeaconStateProvider struct {
	mock.Mock
}

type BeaconStateProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *BeaconStateProvider) EXPECT() *BeaconStateProvider_Expecter {
	return &BeaconStateProvider_Expecter{mock: &_m.Mock}
}

// BeaconState provides a mock function with given fields: ctx
func (_m *BeaconStateProvider) BeaconState(ctx context.Context) state.BeaconState {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BeaconState")
	}

	var r0 state.BeaconState
	if rf, ok := ret.Get(0).(func(context.Context) state.BeaconState); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(state.BeaconState)
		}
	}

	return r0
}

// BeaconStateProvider_BeaconState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeaconState'
type BeaconStateProvider_BeaconState_Call struct {
	*mock.Call
}

// BeaconState is a helper method to define mock.On call
//   - ctx context.Context
func (_e *BeaconStateProvider_Expecter) BeaconState(ctx interface{}) *BeaconStateProvider_BeaconState_Call {
	return &BeaconStateProvider_BeaconState_Call{Call: _e.mock.On("BeaconState", ctx)}
}

func (_c *BeaconStateProvider_BeaconState_Call) Run(run func(ctx context.Context)) *BeaconStateProvider_BeaconState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *BeaconStateProvider_BeaconState_Call) Return(_a0 state.BeaconState) *BeaconStateProvider_BeaconState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BeaconStateProvider_BeaconState_Call) RunAndReturn(run func(context.Context) state.BeaconState) *BeaconStateProvider_BeaconState_Call {
	_c.Call.Return(run)
	return _c
}

// NewBeaconStateProvider creates a new instance of BeaconStateProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBeaconStateProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *BeaconStateProvider {
	mock := &BeaconStateProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

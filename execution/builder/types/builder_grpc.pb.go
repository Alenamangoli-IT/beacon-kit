// SPDX-License-Identifier: MIT
//
// Copyright (c) 2024 Berachain Foundation
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following
// conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: builder/v1alpha1/builder.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BuilderService_GetExecutionPayload_FullMethodName = "/builder.v1alpha1.BuilderService/GetExecutionPayload"
	BuilderService_Status_FullMethodName              = "/builder.v1alpha1.BuilderService/Status"
)

// BuilderServiceClient is the client API for BuilderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BuilderServiceClient interface {
	// RequestBestBlock requests the best available block from the builder.
	GetExecutionPayload(ctx context.Context, in *GetExecutionPayloadRequest, opts ...grpc.CallOption) (*GetExecutionPayloadResponse, error)
	// Status checks to see if builder is healthy.
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type builderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBuilderServiceClient(cc grpc.ClientConnInterface) BuilderServiceClient {
	return &builderServiceClient{cc}
}

func (c *builderServiceClient) GetExecutionPayload(ctx context.Context, in *GetExecutionPayloadRequest, opts ...grpc.CallOption) (*GetExecutionPayloadResponse, error) {
	out := new(GetExecutionPayloadResponse)
	err := c.cc.Invoke(ctx, BuilderService_GetExecutionPayload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *builderServiceClient) Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BuilderService_Status_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuilderServiceServer is the server API for BuilderService service.
// All implementations must embed UnimplementedBuilderServiceServer
// for forward compatibility
type BuilderServiceServer interface {
	// RequestBestBlock requests the best available block from the builder.
	GetExecutionPayload(context.Context, *GetExecutionPayloadRequest) (*GetExecutionPayloadResponse, error)
	// Status checks to see if builder is healthy.
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	Status(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedBuilderServiceServer()
}

// UnimplementedBuilderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBuilderServiceServer struct {
}

func (UnimplementedBuilderServiceServer) GetExecutionPayload(context.Context, *GetExecutionPayloadRequest) (*GetExecutionPayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExecutionPayload not implemented")
}
func (UnimplementedBuilderServiceServer) Status(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedBuilderServiceServer) mustEmbedUnimplementedBuilderServiceServer() {}

// UnsafeBuilderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuilderServiceServer will
// result in compilation errors.
type UnsafeBuilderServiceServer interface {
	mustEmbedUnimplementedBuilderServiceServer()
}

func RegisterBuilderServiceServer(s grpc.ServiceRegistrar, srv BuilderServiceServer) {
	s.RegisterService(&BuilderService_ServiceDesc, srv)
}

func _BuilderService_GetExecutionPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExecutionPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServiceServer).GetExecutionPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuilderService_GetExecutionPayload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServiceServer).GetExecutionPayload(ctx, req.(*GetExecutionPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuilderService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuilderService_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServiceServer).Status(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BuilderService_ServiceDesc is the grpc.ServiceDesc for BuilderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BuilderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "builder.v1alpha1.BuilderService",
	HandlerType: (*BuilderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetExecutionPayload",
			Handler:    _BuilderService_GetExecutionPayload_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _BuilderService_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "builder/v1alpha1/builder.proto",
}

// Code generated by fastssz. DO NOT EDIT.
// Hash: 81bdb1929c5da29bcc20fa24e989372b440096dc227c803d515e8dab41f41c2c
// Version: 0.1.3
package mocks

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Uint8Container object
func (u *Uint8Container) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(u)
}

// MarshalSSZTo ssz marshals the Uint8Container object to a target array
func (u *Uint8Container) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Uint8Field'
	dst = ssz.MarshalUint8(dst, u.Uint8Field)

	return
}

// UnmarshalSSZ ssz unmarshals the Uint8Container object
func (u *Uint8Container) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 1 {
		return ssz.ErrSize
	}

	// Field (0) 'Uint8Field'
	u.Uint8Field = ssz.UnmarshallUint8(buf[0:1])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Uint8Container object
func (u *Uint8Container) SizeSSZ() (size int) {
	size = 1
	return
}

// HashTreeRoot ssz hashes the Uint8Container object
func (u *Uint8Container) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(u)
}

// HashTreeRootWith ssz hashes the Uint8Container object with a hasher
func (u *Uint8Container) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Uint8Field'
	hh.PutUint8(u.Uint8Field)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Uint8Container object
func (u *Uint8Container) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(u)
}

// MarshalSSZ ssz marshals the Uint16Container object
func (u *Uint16Container) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(u)
}

// MarshalSSZTo ssz marshals the Uint16Container object to a target array
func (u *Uint16Container) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Uint16Field'
	dst = ssz.MarshalUint16(dst, u.Uint16Field)

	return
}

// UnmarshalSSZ ssz unmarshals the Uint16Container object
func (u *Uint16Container) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 2 {
		return ssz.ErrSize
	}

	// Field (0) 'Uint16Field'
	u.Uint16Field = ssz.UnmarshallUint16(buf[0:2])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Uint16Container object
func (u *Uint16Container) SizeSSZ() (size int) {
	size = 2
	return
}

// HashTreeRoot ssz hashes the Uint16Container object
func (u *Uint16Container) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(u)
}

// HashTreeRootWith ssz hashes the Uint16Container object with a hasher
func (u *Uint16Container) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Uint16Field'
	hh.PutUint16(u.Uint16Field)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Uint16Container object
func (u *Uint16Container) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(u)
}

// MarshalSSZ ssz marshals the Uint32Container object
func (u *Uint32Container) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(u)
}

// MarshalSSZTo ssz marshals the Uint32Container object to a target array
func (u *Uint32Container) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Uint32Field'
	dst = ssz.MarshalUint32(dst, u.Uint32Field)

	return
}

// UnmarshalSSZ ssz unmarshals the Uint32Container object
func (u *Uint32Container) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 4 {
		return ssz.ErrSize
	}

	// Field (0) 'Uint32Field'
	u.Uint32Field = ssz.UnmarshallUint32(buf[0:4])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Uint32Container object
func (u *Uint32Container) SizeSSZ() (size int) {
	size = 4
	return
}

// HashTreeRoot ssz hashes the Uint32Container object
func (u *Uint32Container) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(u)
}

// HashTreeRootWith ssz hashes the Uint32Container object with a hasher
func (u *Uint32Container) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Uint32Field'
	hh.PutUint32(u.Uint32Field)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Uint32Container object
func (u *Uint32Container) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(u)
}

// MarshalSSZ ssz marshals the Uint64Container object
func (u *Uint64Container) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(u)
}

// MarshalSSZTo ssz marshals the Uint64Container object to a target array
func (u *Uint64Container) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Uint64Field'
	dst = ssz.MarshalUint64(dst, u.Uint64Field)

	return
}

// UnmarshalSSZ ssz unmarshals the Uint64Container object
func (u *Uint64Container) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 8 {
		return ssz.ErrSize
	}

	// Field (0) 'Uint64Field'
	u.Uint64Field = ssz.UnmarshallUint64(buf[0:8])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Uint64Container object
func (u *Uint64Container) SizeSSZ() (size int) {
	size = 8
	return
}

// HashTreeRoot ssz hashes the Uint64Container object
func (u *Uint64Container) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(u)
}

// HashTreeRootWith ssz hashes the Uint64Container object with a hasher
func (u *Uint64Container) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Uint64Field'
	hh.PutUint64(u.Uint64Field)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Uint64Container object
func (u *Uint64Container) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(u)
}

// MarshalSSZ ssz marshals the BoolContainer object
func (b *BoolContainer) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the BoolContainer object to a target array
func (b *BoolContainer) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'BoolField'
	dst = ssz.MarshalBool(dst, b.BoolField)

	return
}

// UnmarshalSSZ ssz unmarshals the BoolContainer object
func (b *BoolContainer) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 1 {
		return ssz.ErrSize
	}

	// Field (0) 'BoolField'
	b.BoolField = ssz.UnmarshalBool(buf[0:1])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the BoolContainer object
func (b *BoolContainer) SizeSSZ() (size int) {
	size = 1
	return
}

// HashTreeRoot ssz hashes the BoolContainer object
func (b *BoolContainer) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the BoolContainer object with a hasher
func (b *BoolContainer) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'BoolField'
	hh.PutBool(b.BoolField)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the BoolContainer object
func (b *BoolContainer) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(b)
}

// MarshalSSZ ssz marshals the ByteContainer object
func (b *ByteContainer) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the ByteContainer object to a target array
func (b *ByteContainer) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'ByteField'
	dst = ssz.MarshalUint8(dst, b.ByteField)

	return
}

// UnmarshalSSZ ssz unmarshals the ByteContainer object
func (b *ByteContainer) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 1 {
		return ssz.ErrSize
	}

	// Field (0) 'ByteField'
	b.ByteField = ssz.UnmarshallUint8(buf[0:1])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ByteContainer object
func (b *ByteContainer) SizeSSZ() (size int) {
	size = 1
	return
}

// HashTreeRoot ssz hashes the ByteContainer object
func (b *ByteContainer) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the ByteContainer object with a hasher
func (b *ByteContainer) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'ByteField'
	hh.PutUint8(b.ByteField)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the ByteContainer object
func (b *ByteContainer) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(b)
}

// MarshalSSZ ssz marshals the Vector4Container object
func (v *Vector4Container) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(v)
}

// MarshalSSZTo ssz marshals the Vector4Container object to a target array
func (v *Vector4Container) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'VectorField'
	if size := len(v.VectorField); size != 4 {
		err = ssz.ErrVectorLengthFn("Vector4Container.VectorField", size, 4)
		return
	}
	for ii := 0; ii < 4; ii++ {
		dst = ssz.MarshalUint64(dst, v.VectorField[ii])
	}

	return
}

// UnmarshalSSZ ssz unmarshals the Vector4Container object
func (v *Vector4Container) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 32 {
		return ssz.ErrSize
	}

	// Field (0) 'VectorField'
	v.VectorField = ssz.ExtendUint64(v.VectorField, 4)
	for ii := 0; ii < 4; ii++ {
		v.VectorField[ii] = ssz.UnmarshallUint64(buf[0:32][ii*8 : (ii+1)*8])
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Vector4Container object
func (v *Vector4Container) SizeSSZ() (size int) {
	size = 32
	return
}

// HashTreeRoot ssz hashes the Vector4Container object
func (v *Vector4Container) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(v)
}

// HashTreeRootWith ssz hashes the Vector4Container object with a hasher
func (v *Vector4Container) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'VectorField'
	{
		if size := len(v.VectorField); size != 4 {
			err = ssz.ErrVectorLengthFn("Vector4Container.VectorField", size, 4)
			return
		}
		subIndx := hh.Index()
		for _, i := range v.VectorField {
			hh.AppendUint64(i)
		}
		hh.Merkleize(subIndx)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Vector4Container object
func (v *Vector4Container) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(v)
}

// MarshalSSZ ssz marshals the Vector5Container object
func (v *Vector5Container) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(v)
}

// MarshalSSZTo ssz marshals the Vector5Container object to a target array
func (v *Vector5Container) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'VectorField'
	if size := len(v.VectorField); size != 5 {
		err = ssz.ErrVectorLengthFn("Vector5Container.VectorField", size, 5)
		return
	}
	for ii := 0; ii < 5; ii++ {
		dst = ssz.MarshalUint64(dst, v.VectorField[ii])
	}

	return
}

// UnmarshalSSZ ssz unmarshals the Vector5Container object
func (v *Vector5Container) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 40 {
		return ssz.ErrSize
	}

	// Field (0) 'VectorField'
	v.VectorField = ssz.ExtendUint64(v.VectorField, 5)
	for ii := 0; ii < 5; ii++ {
		v.VectorField[ii] = ssz.UnmarshallUint64(buf[0:40][ii*8 : (ii+1)*8])
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Vector5Container object
func (v *Vector5Container) SizeSSZ() (size int) {
	size = 40
	return
}

// HashTreeRoot ssz hashes the Vector5Container object
func (v *Vector5Container) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(v)
}

// HashTreeRootWith ssz hashes the Vector5Container object with a hasher
func (v *Vector5Container) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'VectorField'
	{
		if size := len(v.VectorField); size != 5 {
			err = ssz.ErrVectorLengthFn("Vector5Container.VectorField", size, 5)
			return
		}
		subIndx := hh.Index()
		for _, i := range v.VectorField {
			hh.AppendUint64(i)
		}
		hh.Merkleize(subIndx)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Vector5Container object
func (v *Vector5Container) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(v)
}

// MarshalSSZ ssz marshals the Vector6Container object
func (v *Vector6Container) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(v)
}

// MarshalSSZTo ssz marshals the Vector6Container object to a target array
func (v *Vector6Container) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'VectorField'
	if size := len(v.VectorField); size != 6 {
		err = ssz.ErrVectorLengthFn("Vector6Container.VectorField", size, 6)
		return
	}
	for ii := 0; ii < 6; ii++ {
		dst = ssz.MarshalUint64(dst, v.VectorField[ii])
	}

	return
}

// UnmarshalSSZ ssz unmarshals the Vector6Container object
func (v *Vector6Container) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 48 {
		return ssz.ErrSize
	}

	// Field (0) 'VectorField'
	v.VectorField = ssz.ExtendUint64(v.VectorField, 6)
	for ii := 0; ii < 6; ii++ {
		v.VectorField[ii] = ssz.UnmarshallUint64(buf[0:48][ii*8 : (ii+1)*8])
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Vector6Container object
func (v *Vector6Container) SizeSSZ() (size int) {
	size = 48
	return
}

// HashTreeRoot ssz hashes the Vector6Container object
func (v *Vector6Container) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(v)
}

// HashTreeRootWith ssz hashes the Vector6Container object with a hasher
func (v *Vector6Container) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'VectorField'
	{
		if size := len(v.VectorField); size != 6 {
			err = ssz.ErrVectorLengthFn("Vector6Container.VectorField", size, 6)
			return
		}
		subIndx := hh.Index()
		for _, i := range v.VectorField {
			hh.AppendUint64(i)
		}
		hh.Merkleize(subIndx)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Vector6Container object
func (v *Vector6Container) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(v)
}

// Code generated by fastssz. DO NOT EDIT.
// Hash: 5140d144389cedfb7c700f74f2544ffd53ee2531c6c002361ede88ecb8cfedbc
// Version: 0.1.3
package mocks

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Uint64Container object
func (u *Uint64Container) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(u)
}

// MarshalSSZTo ssz marshals the Uint64Container object to a target array
func (u *Uint64Container) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Uint64Field'
	dst = ssz.MarshalUint64(dst, u.Uint64Field)

	return
}

// UnmarshalSSZ ssz unmarshals the Uint64Container object
func (u *Uint64Container) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 8 {
		return ssz.ErrSize
	}

	// Field (0) 'Uint64Field'
	u.Uint64Field = ssz.UnmarshallUint64(buf[0:8])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Uint64Container object
func (u *Uint64Container) SizeSSZ() (size int) {
	size = 8
	return
}

// HashTreeRoot ssz hashes the Uint64Container object
func (u *Uint64Container) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(u)
}

// HashTreeRootWith ssz hashes the Uint64Container object with a hasher
func (u *Uint64Container) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Uint64Field'
	hh.PutUint64(u.Uint64Field)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Uint64Container object
func (u *Uint64Container) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(u)
}

// Code generated by fastssz. DO NOT EDIT.
// Hash: 2b8e6b2b9f4e8577ecc7a78986dd6efdce24fdf169a0ca4fbe45a3adc90502fd
// Version: 0.1.3
package mocks

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Vector4Container object
func (v *Vector4Container) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(v)
}

// MarshalSSZTo ssz marshals the Vector4Container object to a target array
func (v *Vector4Container) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'VectorField'
	if size := len(v.VectorField); size != 4 {
		err = ssz.ErrVectorLengthFn("Vector4Container.VectorField", size, 4)
		return
	}
	for ii := 0; ii < 4; ii++ {
		dst = ssz.MarshalUint64(dst, v.VectorField[ii])
	}

	return
}

// UnmarshalSSZ ssz unmarshals the Vector4Container object
func (v *Vector4Container) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 32 {
		return ssz.ErrSize
	}

	// Field (0) 'VectorField'
	v.VectorField = ssz.ExtendUint64(v.VectorField, 4)
	for ii := 0; ii < 4; ii++ {
		v.VectorField[ii] = ssz.UnmarshallUint64(buf[0:32][ii*8 : (ii+1)*8])
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Vector4Container object
func (v *Vector4Container) SizeSSZ() (size int) {
	size = 32
	return
}

// HashTreeRoot ssz hashes the Vector4Container object
func (v *Vector4Container) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(v)
}

// HashTreeRootWith ssz hashes the Vector4Container object with a hasher
func (v *Vector4Container) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'VectorField'
	{
		if size := len(v.VectorField); size != 4 {
			err = ssz.ErrVectorLengthFn("Vector4Container.VectorField", size, 4)
			return
		}
		subIndx := hh.Index()
		for _, i := range v.VectorField {
			hh.AppendUint64(i)
		}
		hh.Merkleize(subIndx)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Vector4Container object
func (v *Vector4Container) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(v)
}

// MarshalSSZ ssz marshals the Vector5Container object
func (v *Vector5Container) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(v)
}

// MarshalSSZTo ssz marshals the Vector5Container object to a target array
func (v *Vector5Container) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'VectorField'
	if size := len(v.VectorField); size != 5 {
		err = ssz.ErrVectorLengthFn("Vector5Container.VectorField", size, 5)
		return
	}
	for ii := 0; ii < 5; ii++ {
		dst = ssz.MarshalUint64(dst, v.VectorField[ii])
	}

	return
}

// UnmarshalSSZ ssz unmarshals the Vector5Container object
func (v *Vector5Container) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 40 {
		return ssz.ErrSize
	}

	// Field (0) 'VectorField'
	v.VectorField = ssz.ExtendUint64(v.VectorField, 5)
	for ii := 0; ii < 5; ii++ {
		v.VectorField[ii] = ssz.UnmarshallUint64(buf[0:40][ii*8 : (ii+1)*8])
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Vector5Container object
func (v *Vector5Container) SizeSSZ() (size int) {
	size = 40
	return
}

// HashTreeRoot ssz hashes the Vector5Container object
func (v *Vector5Container) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(v)
}

// HashTreeRootWith ssz hashes the Vector5Container object with a hasher
func (v *Vector5Container) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'VectorField'
	{
		if size := len(v.VectorField); size != 5 {
			err = ssz.ErrVectorLengthFn("Vector5Container.VectorField", size, 5)
			return
		}
		subIndx := hh.Index()
		for _, i := range v.VectorField {
			hh.AppendUint64(i)
		}
		hh.Merkleize(subIndx)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Vector5Container object
func (v *Vector5Container) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(v)
}

// MarshalSSZ ssz marshals the Vector6Container object
func (v *Vector6Container) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(v)
}

// MarshalSSZTo ssz marshals the Vector6Container object to a target array
func (v *Vector6Container) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'VectorField'
	if size := len(v.VectorField); size != 6 {
		err = ssz.ErrVectorLengthFn("Vector6Container.VectorField", size, 6)
		return
	}
	for ii := 0; ii < 6; ii++ {
		dst = ssz.MarshalUint64(dst, v.VectorField[ii])
	}

	return
}

// UnmarshalSSZ ssz unmarshals the Vector6Container object
func (v *Vector6Container) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 48 {
		return ssz.ErrSize
	}

	// Field (0) 'VectorField'
	v.VectorField = ssz.ExtendUint64(v.VectorField, 6)
	for ii := 0; ii < 6; ii++ {
		v.VectorField[ii] = ssz.UnmarshallUint64(buf[0:48][ii*8 : (ii+1)*8])
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Vector6Container object
func (v *Vector6Container) SizeSSZ() (size int) {
	size = 48
	return
}

// HashTreeRoot ssz hashes the Vector6Container object
func (v *Vector6Container) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(v)
}

// HashTreeRootWith ssz hashes the Vector6Container object with a hasher
func (v *Vector6Container) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'VectorField'
	{
		if size := len(v.VectorField); size != 6 {
			err = ssz.ErrVectorLengthFn("Vector6Container.VectorField", size, 6)
			return
		}
		subIndx := hh.Index()
		for _, i := range v.VectorField {
			hh.AppendUint64(i)
		}
		hh.Merkleize(subIndx)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Vector6Container object
func (v *Vector6Container) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(v)
}

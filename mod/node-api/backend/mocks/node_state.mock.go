// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	types "github.com/berachain/beacon-kit/mod/node-api/server/types"
	mock "github.com/stretchr/testify/mock"
)

// NodeState is an autogenerated mock type for the NodeState type
type NodeState struct {
	mock.Mock
}

type NodeState_Expecter struct {
	mock *mock.Mock
}

func (_m *NodeState) EXPECT() *NodeState_Expecter {
	return &NodeState_Expecter{mock: &_m.Mock}
}

// GetBlsToExecutionChanges provides a mock function with given fields:
func (_m *NodeState) GetBlsToExecutionChanges() ([]*types.MessageSignature, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBlsToExecutionChanges")
	}

	var r0 []*types.MessageSignature
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*types.MessageSignature, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*types.MessageSignature); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.MessageSignature)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NodeState_GetBlsToExecutionChanges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlsToExecutionChanges'
type NodeState_GetBlsToExecutionChanges_Call struct {
	*mock.Call
}

// GetBlsToExecutionChanges is a helper method to define mock.On call
func (_e *NodeState_Expecter) GetBlsToExecutionChanges() *NodeState_GetBlsToExecutionChanges_Call {
	return &NodeState_GetBlsToExecutionChanges_Call{Call: _e.mock.On("GetBlsToExecutionChanges")}
}

func (_c *NodeState_GetBlsToExecutionChanges_Call) Run(run func()) *NodeState_GetBlsToExecutionChanges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeState_GetBlsToExecutionChanges_Call) Return(_a0 []*types.MessageSignature, _a1 error) *NodeState_GetBlsToExecutionChanges_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NodeState_GetBlsToExecutionChanges_Call) RunAndReturn(run func() ([]*types.MessageSignature, error)) *NodeState_GetBlsToExecutionChanges_Call {
	_c.Call.Return(run)
	return _c
}

// GetSpecParams provides a mock function with given fields:
func (_m *NodeState) GetSpecParams() (*types.SpecParamsResponse, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSpecParams")
	}

	var r0 *types.SpecParamsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() (*types.SpecParamsResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *types.SpecParamsResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SpecParamsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NodeState_GetSpecParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSpecParams'
type NodeState_GetSpecParams_Call struct {
	*mock.Call
}

// GetSpecParams is a helper method to define mock.On call
func (_e *NodeState_Expecter) GetSpecParams() *NodeState_GetSpecParams_Call {
	return &NodeState_GetSpecParams_Call{Call: _e.mock.On("GetSpecParams")}
}

func (_c *NodeState_GetSpecParams_Call) Run(run func()) *NodeState_GetSpecParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeState_GetSpecParams_Call) Return(_a0 *types.SpecParamsResponse, _a1 error) *NodeState_GetSpecParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NodeState_GetSpecParams_Call) RunAndReturn(run func() (*types.SpecParamsResponse, error)) *NodeState_GetSpecParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetVoluntaryExits provides a mock function with given fields:
func (_m *NodeState) GetVoluntaryExits() ([]*types.MessageSignature, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetVoluntaryExits")
	}

	var r0 []*types.MessageSignature
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*types.MessageSignature, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*types.MessageSignature); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.MessageSignature)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NodeState_GetVoluntaryExits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVoluntaryExits'
type NodeState_GetVoluntaryExits_Call struct {
	*mock.Call
}

// GetVoluntaryExits is a helper method to define mock.On call
func (_e *NodeState_Expecter) GetVoluntaryExits() *NodeState_GetVoluntaryExits_Call {
	return &NodeState_GetVoluntaryExits_Call{Call: _e.mock.On("GetVoluntaryExits")}
}

func (_c *NodeState_GetVoluntaryExits_Call) Run(run func()) *NodeState_GetVoluntaryExits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeState_GetVoluntaryExits_Call) Return(_a0 []*types.MessageSignature, _a1 error) *NodeState_GetVoluntaryExits_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NodeState_GetVoluntaryExits_Call) RunAndReturn(run func() ([]*types.MessageSignature, error)) *NodeState_GetVoluntaryExits_Call {
	_c.Call.Return(run)
	return _c
}

// NewNodeState creates a new instance of NodeState. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNodeState(t interface {
	mock.TestingT
	Cleanup(func())
}) *NodeState {
	mock := &NodeState{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

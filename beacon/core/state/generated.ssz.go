// Code generated by fastssz. DO NOT EDIT.
// Hash: 8e1d8114287c1efd0df09234aff7bd7ac37110aca0de5be5a55ac756f7eb9e9d
package state

import (
	"github.com/berachain/beacon-kit/primitives"
	ssz "github.com/prysmaticlabs/fastssz"
)

// MarshalSSZ ssz marshals the BeaconStateDeneb object
func (b *BeaconStateDeneb) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the BeaconStateDeneb object to a target array
func (b *BeaconStateDeneb) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Slot'
	dst = ssz.MarshalUint64(dst, uint64(b.Slot))

	// Field (1) 'PrevRandaoMix'
	dst = append(dst, b.PrevRandaoMix[:]...)

	// Field (2) 'PrevBlockRoot'
	dst = append(dst, b.PrevBlockRoot[:]...)

	// Field (3) 'NextWithdrawalIndex'
	dst = ssz.MarshalUint64(dst, b.NextWithdrawalIndex)

	return
}

// UnmarshalSSZ ssz unmarshals the BeaconStateDeneb object
func (b *BeaconStateDeneb) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 80 {
		return ssz.ErrSize
	}

	// Field (0) 'Slot'
	b.Slot = primitives.Slot(ssz.UnmarshallUint64(buf[0:8]))

	// Field (1) 'PrevRandaoMix'
	copy(b.PrevRandaoMix[:], buf[8:40])

	// Field (2) 'PrevBlockRoot'
	copy(b.PrevBlockRoot[:], buf[40:72])

	// Field (3) 'NextWithdrawalIndex'
	b.NextWithdrawalIndex = ssz.UnmarshallUint64(buf[72:80])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the BeaconStateDeneb object
func (b *BeaconStateDeneb) SizeSSZ() (size int) {
	size = 80
	return
}

// HashTreeRoot ssz hashes the BeaconStateDeneb object
func (b *BeaconStateDeneb) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the BeaconStateDeneb object with a hasher
func (b *BeaconStateDeneb) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Slot'
	hh.PutUint64(uint64(b.Slot))

	// Field (1) 'PrevRandaoMix'
	hh.PutBytes(b.PrevRandaoMix[:])

	// Field (2) 'PrevBlockRoot'
	hh.PutBytes(b.PrevBlockRoot[:])

	// Field (3) 'NextWithdrawalIndex'
	hh.PutUint64(b.NextWithdrawalIndex)

	if ssz.EnableVectorizedHTR {
		hh.MerkleizeVectorizedHTR(indx)
	} else {
		hh.Merkleize(indx)
	}
	return
}

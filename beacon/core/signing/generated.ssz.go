// Code generated by fastssz. DO NOT EDIT.
// Hash: e07b5498ad770d3c30d9b85c2c4aea88e43af1562691f1f20330debbbcdb6cda
// Version: 0.1.3
package signing

import (
	"github.com/berachain/beacon-kit/primitives"
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Fork object
func (f *Fork) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(f)
}

// MarshalSSZTo ssz marshals the Fork object to a target array
func (f *Fork) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(16)

	// Offset (0) 'PreviousVersion'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(f.PreviousVersion)

	// Offset (1) 'CurrentVersion'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(f.CurrentVersion)

	// Field (2) 'Epoch'
	dst = ssz.MarshalUint64(dst, uint64(f.Epoch))

	// Field (0) 'PreviousVersion'
	dst = append(dst, f.PreviousVersion[:]...)

	// Field (1) 'CurrentVersion'
	dst = append(dst, f.CurrentVersion[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the Fork object
func (f *Fork) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 16 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1 uint64

	// Offset (0) 'PreviousVersion'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 16 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'CurrentVersion'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Field (2) 'Epoch'
	f.Epoch = primitives.Epoch(ssz.UnmarshallUint64(buf[8:16]))

	// Field (0) 'PreviousVersion'
	{
		buf = tail[o0:o1]
		copy(f.PreviousVersion[:], buf)
	}

	// Field (1) 'CurrentVersion'
	{
		buf = tail[o1:]
		copy(f.CurrentVersion[:], buf)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Fork object
func (f *Fork) SizeSSZ() (size int) {
	size = 16

	// Field (0) 'PreviousVersion'
	size += len(f.PreviousVersion)

	// Field (1) 'CurrentVersion'
	size += len(f.CurrentVersion)

	return
}

// HashTreeRoot ssz hashes the Fork object
func (f *Fork) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(f)
}

// HashTreeRootWith ssz hashes the Fork object with a hasher
func (f *Fork) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'PreviousVersion'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(f.PreviousVersion[:]))
		if byteLen > 0 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(f.PreviousVersion[:])
		hh.MerkleizeWithMixin(elemIndx, byteLen, (0+31)/32)
	}

	// Field (1) 'CurrentVersion'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(f.CurrentVersion[:]))
		if byteLen > 0 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(f.CurrentVersion[:])
		hh.MerkleizeWithMixin(elemIndx, byteLen, (0+31)/32)
	}

	// Field (2) 'Epoch'
	hh.PutUint64(uint64(f.Epoch))

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Fork object
func (f *Fork) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(f)
}

// MarshalSSZ ssz marshals the ForkData object
func (f *ForkData) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(f)
}

// MarshalSSZTo ssz marshals the ForkData object to a target array
func (f *ForkData) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'CurrentVersion'
	dst = append(dst, f.CurrentVersion[:]...)

	// Field (1) 'GenesisValidatorsRoot'
	dst = append(dst, f.GenesisValidatorsRoot[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the ForkData object
func (f *ForkData) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 36 {
		return ssz.ErrSize
	}

	// Field (0) 'CurrentVersion'
	copy(f.CurrentVersion[:], buf[0:4])

	// Field (1) 'GenesisValidatorsRoot'
	copy(f.GenesisValidatorsRoot[:], buf[4:36])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ForkData object
func (f *ForkData) SizeSSZ() (size int) {
	size = 36
	return
}

// HashTreeRoot ssz hashes the ForkData object
func (f *ForkData) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(f)
}

// HashTreeRootWith ssz hashes the ForkData object with a hasher
func (f *ForkData) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'CurrentVersion'
	hh.PutBytes(f.CurrentVersion[:])

	// Field (1) 'GenesisValidatorsRoot'
	hh.PutBytes(f.GenesisValidatorsRoot[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the ForkData object
func (f *ForkData) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(f)
}

// MarshalSSZ ssz marshals the Data object
func (d *Data) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(d)
}

// MarshalSSZTo ssz marshals the Data object to a target array
func (d *Data) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'ObjectRoot'
	dst = append(dst, d.ObjectRoot[:]...)

	// Field (1) 'Domain'
	dst = append(dst, d.Domain[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the Data object
func (d *Data) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 64 {
		return ssz.ErrSize
	}

	// Field (0) 'ObjectRoot'
	copy(d.ObjectRoot[:], buf[0:32])

	// Field (1) 'Domain'
	copy(d.Domain[:], buf[32:64])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Data object
func (d *Data) SizeSSZ() (size int) {
	size = 64
	return
}

// HashTreeRoot ssz hashes the Data object
func (d *Data) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(d)
}

// HashTreeRootWith ssz hashes the Data object with a hasher
func (d *Data) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'ObjectRoot'
	hh.PutBytes(d.ObjectRoot[:])

	// Field (1) 'Domain'
	hh.PutBytes(d.Domain[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Data object
func (d *Data) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(d)
}

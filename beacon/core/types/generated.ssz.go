// Code generated by fastssz. DO NOT EDIT.
// Hash: 813b2693b31e0d984e84844a839c1aad10b0f708d13f743d158399a54bab2558
package types

import (
	enginetypes "github.com/berachain/beacon-kit/engine/types"
	"github.com/berachain/beacon-kit/primitives"
	ssz "github.com/prysmaticlabs/fastssz"
)

// MarshalSSZ ssz marshals the BeaconBlockDeneb object
func (b *BeaconBlockDeneb) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the BeaconBlockDeneb object to a target array
func (b *BeaconBlockDeneb) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(84)

	// Field (0) 'Slot'
	dst = ssz.MarshalUint64(dst, uint64(b.Slot))

	// Field (1) 'ProposerIndex'
	dst = ssz.MarshalUint64(dst, uint64(b.ProposerIndex))

	// Field (2) 'ParentBlockRoot'
	dst = append(dst, b.ParentBlockRoot[:]...)

	// Field (3) 'StateRoot'
	dst = append(dst, b.StateRoot[:]...)

	// Offset (4) 'Body'
	dst = ssz.WriteOffset(dst, offset)
	if b.Body == nil {
		b.Body = new(BeaconBlockBodyDeneb)
	}
	offset += b.Body.SizeSSZ()

	// Field (4) 'Body'
	if dst, err = b.Body.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the BeaconBlockDeneb object
func (b *BeaconBlockDeneb) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 84 {
		return ssz.ErrSize
	}

	tail := buf
	var o4 uint64

	// Field (0) 'Slot'
	b.Slot = primitives.Slot(ssz.UnmarshallUint64(buf[0:8]))

	// Field (1) 'ProposerIndex'
	b.ProposerIndex = primitives.ValidatorIndex(ssz.UnmarshallUint64(buf[8:16]))

	// Field (2) 'ParentBlockRoot'
	copy(b.ParentBlockRoot[:], buf[16:48])

	// Field (3) 'StateRoot'
	copy(b.StateRoot[:], buf[48:80])

	// Offset (4) 'Body'
	if o4 = ssz.ReadOffset(buf[80:84]); o4 > size {
		return ssz.ErrOffset
	}

	if o4 < 84 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (4) 'Body'
	{
		buf = tail[o4:]
		if b.Body == nil {
			b.Body = new(BeaconBlockBodyDeneb)
		}
		if err = b.Body.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the BeaconBlockDeneb object
func (b *BeaconBlockDeneb) SizeSSZ() (size int) {
	size = 84

	// Field (4) 'Body'
	if b.Body == nil {
		b.Body = new(BeaconBlockBodyDeneb)
	}
	size += b.Body.SizeSSZ()

	return
}

// HashTreeRoot ssz hashes the BeaconBlockDeneb object
func (b *BeaconBlockDeneb) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the BeaconBlockDeneb object with a hasher
func (b *BeaconBlockDeneb) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Slot'
	hh.PutUint64(uint64(b.Slot))

	// Field (1) 'ProposerIndex'
	hh.PutUint64(uint64(b.ProposerIndex))

	// Field (2) 'ParentBlockRoot'
	hh.PutBytes(b.ParentBlockRoot[:])

	// Field (3) 'StateRoot'
	hh.PutBytes(b.StateRoot[:])

	// Field (4) 'Body'
	if err = b.Body.HashTreeRootWith(hh); err != nil {
		return
	}

	if ssz.EnableVectorizedHTR {
		hh.MerkleizeVectorizedHTR(indx)
	} else {
		hh.Merkleize(indx)
	}
	return
}

// MarshalSSZ ssz marshals the BeaconBlockBodyDeneb object
func (b *BeaconBlockBodyDeneb) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the BeaconBlockBodyDeneb object to a target array
func (b *BeaconBlockBodyDeneb) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(144)

	// Field (0) 'RandaoReveal'
	dst = append(dst, b.RandaoReveal[:]...)

	// Field (1) 'Graffiti'
	dst = append(dst, b.Graffiti[:]...)

	// Offset (2) 'Deposits'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(b.Deposits); ii++ {
		offset += 4
		offset += b.Deposits[ii].SizeSSZ()
	}

	// Offset (3) 'Redirects'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(b.Redirects); ii++ {
		offset += 4
		offset += b.Redirects[ii].SizeSSZ()
	}

	// Offset (4) 'ExecutionPayload'
	dst = ssz.WriteOffset(dst, offset)
	if b.ExecutionPayload == nil {
		b.ExecutionPayload = new(enginetypes.ExecutableDataDeneb)
	}
	offset += b.ExecutionPayload.SizeSSZ()

	// Offset (5) 'BlobKzgCommitments'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(b.BlobKzgCommitments) * 48

	// Field (2) 'Deposits'
	if size := len(b.Deposits); size > 16 {
		err = ssz.ErrListTooBigFn("--.Deposits", size, 16)
		return
	}
	{
		offset = 4 * len(b.Deposits)
		for ii := 0; ii < len(b.Deposits); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += b.Deposits[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(b.Deposits); ii++ {
		if dst, err = b.Deposits[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (3) 'Redirects'
	if size := len(b.Redirects); size > 16 {
		err = ssz.ErrListTooBigFn("--.Redirects", size, 16)
		return
	}
	{
		offset = 4 * len(b.Redirects)
		for ii := 0; ii < len(b.Redirects); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += b.Redirects[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(b.Redirects); ii++ {
		if dst, err = b.Redirects[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (4) 'ExecutionPayload'
	if dst, err = b.ExecutionPayload.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (5) 'BlobKzgCommitments'
	if size := len(b.BlobKzgCommitments); size > 16 {
		err = ssz.ErrListTooBigFn("--.BlobKzgCommitments", size, 16)
		return
	}
	for ii := 0; ii < len(b.BlobKzgCommitments); ii++ {
		dst = append(dst, b.BlobKzgCommitments[ii][:]...)
	}

	return
}

// UnmarshalSSZ ssz unmarshals the BeaconBlockBodyDeneb object
func (b *BeaconBlockBodyDeneb) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 144 {
		return ssz.ErrSize
	}

	tail := buf
	var o2, o3, o4, o5 uint64

	// Field (0) 'RandaoReveal'
	copy(b.RandaoReveal[:], buf[0:96])

	// Field (1) 'Graffiti'
	copy(b.Graffiti[:], buf[96:128])

	// Offset (2) 'Deposits'
	if o2 = ssz.ReadOffset(buf[128:132]); o2 > size {
		return ssz.ErrOffset
	}

	if o2 < 144 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (3) 'Redirects'
	if o3 = ssz.ReadOffset(buf[132:136]); o3 > size || o2 > o3 {
		return ssz.ErrOffset
	}

	// Offset (4) 'ExecutionPayload'
	if o4 = ssz.ReadOffset(buf[136:140]); o4 > size || o3 > o4 {
		return ssz.ErrOffset
	}

	// Offset (5) 'BlobKzgCommitments'
	if o5 = ssz.ReadOffset(buf[140:144]); o5 > size || o4 > o5 {
		return ssz.ErrOffset
	}

	// Field (2) 'Deposits'
	{
		buf = tail[o2:o3]
		num, err := ssz.DecodeDynamicLength(buf, 16)
		if err != nil {
			return err
		}
		b.Deposits = make([]*Deposit, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if b.Deposits[indx] == nil {
				b.Deposits[indx] = new(Deposit)
			}
			if err = b.Deposits[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (3) 'Redirects'
	{
		buf = tail[o3:o4]
		num, err := ssz.DecodeDynamicLength(buf, 16)
		if err != nil {
			return err
		}
		b.Redirects = make([]*Redirect, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if b.Redirects[indx] == nil {
				b.Redirects[indx] = new(Redirect)
			}
			if err = b.Redirects[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (4) 'ExecutionPayload'
	{
		buf = tail[o4:o5]
		if b.ExecutionPayload == nil {
			b.ExecutionPayload = new(enginetypes.ExecutableDataDeneb)
		}
		if err = b.ExecutionPayload.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (5) 'BlobKzgCommitments'
	{
		buf = tail[o5:]
		num, err := ssz.DivideInt2(len(buf), 48, 16)
		if err != nil {
			return err
		}
		b.BlobKzgCommitments = make([][48]byte, num)
		for ii := 0; ii < num; ii++ {
			copy(b.BlobKzgCommitments[ii][:], buf[ii*48:(ii+1)*48])
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the BeaconBlockBodyDeneb object
func (b *BeaconBlockBodyDeneb) SizeSSZ() (size int) {
	size = 144

	// Field (2) 'Deposits'
	for ii := 0; ii < len(b.Deposits); ii++ {
		size += 4
		size += b.Deposits[ii].SizeSSZ()
	}

	// Field (3) 'Redirects'
	for ii := 0; ii < len(b.Redirects); ii++ {
		size += 4
		size += b.Redirects[ii].SizeSSZ()
	}

	// Field (4) 'ExecutionPayload'
	if b.ExecutionPayload == nil {
		b.ExecutionPayload = new(enginetypes.ExecutableDataDeneb)
	}
	size += b.ExecutionPayload.SizeSSZ()

	// Field (5) 'BlobKzgCommitments'
	size += len(b.BlobKzgCommitments) * 48

	return
}

// HashTreeRoot ssz hashes the BeaconBlockBodyDeneb object
func (b *BeaconBlockBodyDeneb) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the BeaconBlockBodyDeneb object with a hasher
func (b *BeaconBlockBodyDeneb) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'RandaoReveal'
	hh.PutBytes(b.RandaoReveal[:])

	// Field (1) 'Graffiti'
	hh.PutBytes(b.Graffiti[:])

	// Field (2) 'Deposits'
	{
		subIndx := hh.Index()
		num := uint64(len(b.Deposits))
		if num > 16 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range b.Deposits {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		if ssz.EnableVectorizedHTR {
			hh.MerkleizeWithMixinVectorizedHTR(subIndx, num, 16)
		} else {
			hh.MerkleizeWithMixin(subIndx, num, 16)
		}
	}

	// Field (3) 'Redirects'
	{
		subIndx := hh.Index()
		num := uint64(len(b.Redirects))
		if num > 16 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range b.Redirects {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		if ssz.EnableVectorizedHTR {
			hh.MerkleizeWithMixinVectorizedHTR(subIndx, num, 16)
		} else {
			hh.MerkleizeWithMixin(subIndx, num, 16)
		}
	}

	// Field (4) 'ExecutionPayload'
	if err = b.ExecutionPayload.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (5) 'BlobKzgCommitments'
	{
		if size := len(b.BlobKzgCommitments); size > 16 {
			err = ssz.ErrListTooBigFn("--.BlobKzgCommitments", size, 16)
			return
		}
		subIndx := hh.Index()
		for _, i := range b.BlobKzgCommitments {
			hh.PutBytes(i[:])
		}

		numItems := uint64(len(b.BlobKzgCommitments))
		if ssz.EnableVectorizedHTR {
			hh.MerkleizeWithMixinVectorizedHTR(subIndx, numItems, 16)
		} else {
			hh.MerkleizeWithMixin(subIndx, numItems, 16)
		}
	}

	if ssz.EnableVectorizedHTR {
		hh.MerkleizeVectorizedHTR(indx)
	} else {
		hh.Merkleize(indx)
	}
	return
}

// MarshalSSZ ssz marshals the Deposit object
func (d *Deposit) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(d)
}

// MarshalSSZTo ssz marshals the Deposit object to a target array
func (d *Deposit) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(56)

	// Offset (0) 'Pubkey'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(d.Pubkey)

	// Field (1) 'Credentials'
	if size := len(d.Credentials); size != 32 {
		err = ssz.ErrBytesLengthFn("--.Credentials", size, 32)
		return
	}
	dst = append(dst, d.Credentials...)

	// Field (2) 'Amount'
	dst = ssz.MarshalUint64(dst, d.Amount)

	// Offset (3) 'Signature'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(d.Signature)

	// Field (4) 'Index'
	dst = ssz.MarshalUint64(dst, d.Index)

	// Field (0) 'Pubkey'
	if size := len(d.Pubkey); size > 48 {
		err = ssz.ErrBytesLengthFn("--.Pubkey", size, 48)
		return
	}
	dst = append(dst, d.Pubkey...)

	// Field (3) 'Signature'
	if size := len(d.Signature); size > 96 {
		err = ssz.ErrBytesLengthFn("--.Signature", size, 96)
		return
	}
	dst = append(dst, d.Signature...)

	return
}

// UnmarshalSSZ ssz unmarshals the Deposit object
func (d *Deposit) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 56 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o3 uint64

	// Offset (0) 'Pubkey'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 56 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'Credentials'
	if cap(d.Credentials) == 0 {
		d.Credentials = make([]byte, 0, len(buf[4:36]))
	}
	d.Credentials = append(d.Credentials, buf[4:36]...)

	// Field (2) 'Amount'
	d.Amount = ssz.UnmarshallUint64(buf[36:44])

	// Offset (3) 'Signature'
	if o3 = ssz.ReadOffset(buf[44:48]); o3 > size || o0 > o3 {
		return ssz.ErrOffset
	}

	// Field (4) 'Index'
	d.Index = ssz.UnmarshallUint64(buf[48:56])

	// Field (0) 'Pubkey'
	{
		buf = tail[o0:o3]
		if len(buf) > 48 {
			return ssz.ErrBytesLength
		}
		if cap(d.Pubkey) == 0 {
			d.Pubkey = make([]byte, 0, len(buf))
		}
		d.Pubkey = append(d.Pubkey, buf...)
	}

	// Field (3) 'Signature'
	{
		buf = tail[o3:]
		if len(buf) > 96 {
			return ssz.ErrBytesLength
		}
		if cap(d.Signature) == 0 {
			d.Signature = make([]byte, 0, len(buf))
		}
		d.Signature = append(d.Signature, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Deposit object
func (d *Deposit) SizeSSZ() (size int) {
	size = 56

	// Field (0) 'Pubkey'
	size += len(d.Pubkey)

	// Field (3) 'Signature'
	size += len(d.Signature)

	return
}

// HashTreeRoot ssz hashes the Deposit object
func (d *Deposit) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(d)
}

// HashTreeRootWith ssz hashes the Deposit object with a hasher
func (d *Deposit) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Pubkey'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(d.Pubkey))
		if byteLen > 48 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.PutBytes(d.Pubkey)
		if ssz.EnableVectorizedHTR {
			hh.MerkleizeWithMixinVectorizedHTR(elemIndx, byteLen, (48+31)/32)
		} else {
			hh.MerkleizeWithMixin(elemIndx, byteLen, (48+31)/32)
		}
	}

	// Field (1) 'Credentials'
	if size := len(d.Credentials); size != 32 {
		err = ssz.ErrBytesLengthFn("--.Credentials", size, 32)
		return
	}
	hh.PutBytes(d.Credentials)

	// Field (2) 'Amount'
	hh.PutUint64(d.Amount)

	// Field (3) 'Signature'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(d.Signature))
		if byteLen > 96 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.PutBytes(d.Signature)
		if ssz.EnableVectorizedHTR {
			hh.MerkleizeWithMixinVectorizedHTR(elemIndx, byteLen, (96+31)/32)
		} else {
			hh.MerkleizeWithMixin(elemIndx, byteLen, (96+31)/32)
		}
	}

	// Field (4) 'Index'
	hh.PutUint64(d.Index)

	if ssz.EnableVectorizedHTR {
		hh.MerkleizeVectorizedHTR(indx)
	} else {
		hh.Merkleize(indx)
	}
	return
}

// MarshalSSZ ssz marshals the BeaconBlockHeader object
func (b *BeaconBlockHeader) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the BeaconBlockHeader object to a target array
func (b *BeaconBlockHeader) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Slot'
	dst = ssz.MarshalUint64(dst, uint64(b.Slot))

	// Field (1) 'ProposerIndex'
	dst = ssz.MarshalUint64(dst, uint64(b.ProposerIndex))

	// Field (2) 'ParentRoot'
	dst = append(dst, b.ParentRoot[:]...)

	// Field (3) 'StateRoot'
	dst = append(dst, b.StateRoot[:]...)

	// Field (4) 'BodyRoot'
	dst = append(dst, b.BodyRoot[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the BeaconBlockHeader object
func (b *BeaconBlockHeader) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 112 {
		return ssz.ErrSize
	}

	// Field (0) 'Slot'
	b.Slot = primitives.Slot(ssz.UnmarshallUint64(buf[0:8]))

	// Field (1) 'ProposerIndex'
	b.ProposerIndex = primitives.ValidatorIndex(ssz.UnmarshallUint64(buf[8:16]))

	// Field (2) 'ParentRoot'
	copy(b.ParentRoot[:], buf[16:48])

	// Field (3) 'StateRoot'
	copy(b.StateRoot[:], buf[48:80])

	// Field (4) 'BodyRoot'
	copy(b.BodyRoot[:], buf[80:112])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the BeaconBlockHeader object
func (b *BeaconBlockHeader) SizeSSZ() (size int) {
	size = 112
	return
}

// HashTreeRoot ssz hashes the BeaconBlockHeader object
func (b *BeaconBlockHeader) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the BeaconBlockHeader object with a hasher
func (b *BeaconBlockHeader) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Slot'
	hh.PutUint64(uint64(b.Slot))

	// Field (1) 'ProposerIndex'
	hh.PutUint64(uint64(b.ProposerIndex))

	// Field (2) 'ParentRoot'
	hh.PutBytes(b.ParentRoot[:])

	// Field (3) 'StateRoot'
	hh.PutBytes(b.StateRoot[:])

	// Field (4) 'BodyRoot'
	hh.PutBytes(b.BodyRoot[:])

	if ssz.EnableVectorizedHTR {
		hh.MerkleizeVectorizedHTR(indx)
	} else {
		hh.Merkleize(indx)
	}
	return
}

// MarshalSSZ ssz marshals the Redirect object
func (r *Redirect) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(r)
}

// MarshalSSZTo ssz marshals the Redirect object to a target array
func (r *Redirect) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(60)

	// Offset (0) 'Pubkey'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(r.Pubkey)

	// Offset (1) 'NewPubkey'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(r.NewPubkey)

	// Field (2) 'Credentials'
	if size := len(r.Credentials); size != 32 {
		err = ssz.ErrBytesLengthFn("--.Credentials", size, 32)
		return
	}
	dst = append(dst, r.Credentials...)

	// Field (3) 'Amount'
	dst = ssz.MarshalUint64(dst, r.Amount)

	// Offset (4) 'Signature'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(r.Signature)

	// Field (5) 'Index'
	dst = ssz.MarshalUint64(dst, r.Index)

	// Field (0) 'Pubkey'
	if size := len(r.Pubkey); size > 48 {
		err = ssz.ErrBytesLengthFn("--.Pubkey", size, 48)
		return
	}
	dst = append(dst, r.Pubkey...)

	// Field (1) 'NewPubkey'
	if size := len(r.NewPubkey); size > 48 {
		err = ssz.ErrBytesLengthFn("--.NewPubkey", size, 48)
		return
	}
	dst = append(dst, r.NewPubkey...)

	// Field (4) 'Signature'
	if size := len(r.Signature); size > 96 {
		err = ssz.ErrBytesLengthFn("--.Signature", size, 96)
		return
	}
	dst = append(dst, r.Signature...)

	return
}

// UnmarshalSSZ ssz unmarshals the Redirect object
func (r *Redirect) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 60 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1, o4 uint64

	// Offset (0) 'Pubkey'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 60 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'NewPubkey'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Field (2) 'Credentials'
	if cap(r.Credentials) == 0 {
		r.Credentials = make([]byte, 0, len(buf[8:40]))
	}
	r.Credentials = append(r.Credentials, buf[8:40]...)

	// Field (3) 'Amount'
	r.Amount = ssz.UnmarshallUint64(buf[40:48])

	// Offset (4) 'Signature'
	if o4 = ssz.ReadOffset(buf[48:52]); o4 > size || o1 > o4 {
		return ssz.ErrOffset
	}

	// Field (5) 'Index'
	r.Index = ssz.UnmarshallUint64(buf[52:60])

	// Field (0) 'Pubkey'
	{
		buf = tail[o0:o1]
		if len(buf) > 48 {
			return ssz.ErrBytesLength
		}
		if cap(r.Pubkey) == 0 {
			r.Pubkey = make([]byte, 0, len(buf))
		}
		r.Pubkey = append(r.Pubkey, buf...)
	}

	// Field (1) 'NewPubkey'
	{
		buf = tail[o1:o4]
		if len(buf) > 48 {
			return ssz.ErrBytesLength
		}
		if cap(r.NewPubkey) == 0 {
			r.NewPubkey = make([]byte, 0, len(buf))
		}
		r.NewPubkey = append(r.NewPubkey, buf...)
	}

	// Field (4) 'Signature'
	{
		buf = tail[o4:]
		if len(buf) > 96 {
			return ssz.ErrBytesLength
		}
		if cap(r.Signature) == 0 {
			r.Signature = make([]byte, 0, len(buf))
		}
		r.Signature = append(r.Signature, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Redirect object
func (r *Redirect) SizeSSZ() (size int) {
	size = 60

	// Field (0) 'Pubkey'
	size += len(r.Pubkey)

	// Field (1) 'NewPubkey'
	size += len(r.NewPubkey)

	// Field (4) 'Signature'
	size += len(r.Signature)

	return
}

// HashTreeRoot ssz hashes the Redirect object
func (r *Redirect) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(r)
}

// HashTreeRootWith ssz hashes the Redirect object with a hasher
func (r *Redirect) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Pubkey'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(r.Pubkey))
		if byteLen > 48 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.PutBytes(r.Pubkey)
		if ssz.EnableVectorizedHTR {
			hh.MerkleizeWithMixinVectorizedHTR(elemIndx, byteLen, (48+31)/32)
		} else {
			hh.MerkleizeWithMixin(elemIndx, byteLen, (48+31)/32)
		}
	}

	// Field (1) 'NewPubkey'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(r.NewPubkey))
		if byteLen > 48 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.PutBytes(r.NewPubkey)
		if ssz.EnableVectorizedHTR {
			hh.MerkleizeWithMixinVectorizedHTR(elemIndx, byteLen, (48+31)/32)
		} else {
			hh.MerkleizeWithMixin(elemIndx, byteLen, (48+31)/32)
		}
	}

	// Field (2) 'Credentials'
	if size := len(r.Credentials); size != 32 {
		err = ssz.ErrBytesLengthFn("--.Credentials", size, 32)
		return
	}
	hh.PutBytes(r.Credentials)

	// Field (3) 'Amount'
	hh.PutUint64(r.Amount)

	// Field (4) 'Signature'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(r.Signature))
		if byteLen > 96 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.PutBytes(r.Signature)
		if ssz.EnableVectorizedHTR {
			hh.MerkleizeWithMixinVectorizedHTR(elemIndx, byteLen, (96+31)/32)
		} else {
			hh.MerkleizeWithMixin(elemIndx, byteLen, (96+31)/32)
		}
	}

	// Field (5) 'Index'
	hh.PutUint64(r.Index)

	if ssz.EnableVectorizedHTR {
		hh.MerkleizeVectorizedHTR(indx)
	} else {
		hh.Merkleize(indx)
	}
	return
}

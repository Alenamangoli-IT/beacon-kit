// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"

	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*beaconBlockHeaderJSONMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (b BeaconBlockHeader) MarshalJSON() ([]byte, error) {
	type BeaconBlockHeader struct {
		Slot          uint64        `json:"slot"`
		ProposerIndex uint64        `json:"proposerIndex"`
		ParentRoot    hexutil.Bytes `json:"parentRoot"    ssz-size:"32"`
		StateRoot     hexutil.Bytes `json:"stateRoot"     ssz-size:"32"`
		BodyRoot      hexutil.Bytes `json:"bodyRoot"      ssz-size:"32"`
	}
	var enc BeaconBlockHeader
	enc.Slot = b.Slot
	enc.ProposerIndex = b.ProposerIndex
	enc.ParentRoot = b.ParentRoot[:]
	enc.StateRoot = b.StateRoot[:]
	enc.BodyRoot = b.BodyRoot[:]
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (b *BeaconBlockHeader) UnmarshalJSON(input []byte) error {
	type BeaconBlockHeader struct {
		Slot          *uint64        `json:"slot"`
		ProposerIndex *uint64        `json:"proposerIndex"`
		ParentRoot    *hexutil.Bytes `json:"parentRoot"    ssz-size:"32"`
		StateRoot     *hexutil.Bytes `json:"stateRoot"     ssz-size:"32"`
		BodyRoot      *hexutil.Bytes `json:"bodyRoot"      ssz-size:"32"`
	}
	var dec BeaconBlockHeader
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Slot != nil {
		b.Slot = *dec.Slot
	}
	if dec.ProposerIndex != nil {
		b.ProposerIndex = *dec.ProposerIndex
	}
	if dec.ParentRoot != nil {
		if len(*dec.ParentRoot) != len(b.ParentRoot) {
			return errors.New("field 'parentRoot' has wrong length, need 32 items")
		}
		copy(b.ParentRoot[:], *dec.ParentRoot)
	}
	if dec.StateRoot != nil {
		if len(*dec.StateRoot) != len(b.StateRoot) {
			return errors.New("field 'stateRoot' has wrong length, need 32 items")
		}
		copy(b.StateRoot[:], *dec.StateRoot)
	}
	if dec.BodyRoot != nil {
		if len(*dec.BodyRoot) != len(b.BodyRoot) {
			return errors.New("field 'bodyRoot' has wrong length, need 32 items")
		}
		copy(b.BodyRoot[:], *dec.BodyRoot)
	}
	return nil
}

// Code generated by fastssz. DO NOT EDIT.
// Hash: 0f857efc448b738fa4551551cbde3b3d204596b7b43d1cd3f17576053ab25495
package randao

import (
	"github.com/itsdevbear/bolaris/types/consensus/primitives"
	ssz "github.com/prysmaticlabs/fastssz"
)

// MarshalSSZ ssz marshals the MySSZType object
func (m *MySSZType) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(m)
}

// MarshalSSZTo ssz marshals the MySSZType object to a target array
func (m *MySSZType) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'MyFirstField'
	if size := len(m.MyFirstField); size != 96 {
		err = ssz.ErrBytesLengthFn("--.MyFirstField", size, 96)
		return
	}
	dst = append(dst, m.MyFirstField...)

	// Field (1) 'MySecondField'
	dst = ssz.MarshalUint64(dst, uint64(m.MySecondField))

	return
}

// UnmarshalSSZ ssz unmarshals the MySSZType object
func (m *MySSZType) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 104 {
		return ssz.ErrSize
	}

	// Field (0) 'MyFirstField'
	if cap(m.MyFirstField) == 0 {
		m.MyFirstField = make([]byte, 0, len(buf[0:96]))
	}
	m.MyFirstField = append(m.MyFirstField, buf[0:96]...)

	// Field (1) 'MySecondField'
	m.MySecondField = primitives.SSZUint64(ssz.UnmarshallUint64(buf[96:104]))

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the MySSZType object
func (m *MySSZType) SizeSSZ() (size int) {
	size = 104
	return
}

// HashTreeRoot ssz hashes the MySSZType object
func (m *MySSZType) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(m)
}

// HashTreeRootWith ssz hashes the MySSZType object with a hasher
func (m *MySSZType) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'MyFirstField'
	if size := len(m.MyFirstField); size != 96 {
		err = ssz.ErrBytesLengthFn("--.MyFirstField", size, 96)
		return
	}
	hh.PutBytes(m.MyFirstField)

	// Field (1) 'MySecondField'
	hh.PutUint64(uint64(m.MySecondField))

	if ssz.EnableVectorizedHTR {
		hh.MerkleizeVectorizedHTR(indx)
	} else {
		hh.Merkleize(indx)
	}
	return
}

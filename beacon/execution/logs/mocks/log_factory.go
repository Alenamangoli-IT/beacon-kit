// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	logs "github.com/berachain/beacon-kit/beacon/execution/logs"
	common "github.com/ethereum/go-ethereum/common"
	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// LogFactory is an autogenerated mock type for the LogFactory type
type LogFactory struct {
	mock.Mock
}

type LogFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *LogFactory) EXPECT() *LogFactory_Expecter {
	return &LogFactory_Expecter{mock: &_m.Mock}
}

// GetRegisteredAddresses provides a mock function with given fields:
func (_m *LogFactory) GetRegisteredAddresses() []common.Address {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRegisteredAddresses")
	}

	var r0 []common.Address
	if rf, ok := ret.Get(0).(func() []common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Address)
		}
	}

	return r0
}

// LogFactory_GetRegisteredAddresses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRegisteredAddresses'
type LogFactory_GetRegisteredAddresses_Call struct {
	*mock.Call
}

// GetRegisteredAddresses is a helper method to define mock.On call
func (_e *LogFactory_Expecter) GetRegisteredAddresses() *LogFactory_GetRegisteredAddresses_Call {
	return &LogFactory_GetRegisteredAddresses_Call{Call: _e.mock.On("GetRegisteredAddresses")}
}

func (_c *LogFactory_GetRegisteredAddresses_Call) Run(run func()) *LogFactory_GetRegisteredAddresses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LogFactory_GetRegisteredAddresses_Call) Return(_a0 []common.Address) *LogFactory_GetRegisteredAddresses_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogFactory_GetRegisteredAddresses_Call) RunAndReturn(run func() []common.Address) *LogFactory_GetRegisteredAddresses_Call {
	_c.Call.Return(run)
	return _c
}

// GetRegisteredSignatures provides a mock function with given fields:
func (_m *LogFactory) GetRegisteredSignatures() []common.Hash {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRegisteredSignatures")
	}

	var r0 []common.Hash
	if rf, ok := ret.Get(0).(func() []common.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Hash)
		}
	}

	return r0
}

// LogFactory_GetRegisteredSignatures_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRegisteredSignatures'
type LogFactory_GetRegisteredSignatures_Call struct {
	*mock.Call
}

// GetRegisteredSignatures is a helper method to define mock.On call
func (_e *LogFactory_Expecter) GetRegisteredSignatures() *LogFactory_GetRegisteredSignatures_Call {
	return &LogFactory_GetRegisteredSignatures_Call{Call: _e.mock.On("GetRegisteredSignatures")}
}

func (_c *LogFactory_GetRegisteredSignatures_Call) Run(run func()) *LogFactory_GetRegisteredSignatures_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LogFactory_GetRegisteredSignatures_Call) Return(_a0 []common.Hash) *LogFactory_GetRegisteredSignatures_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogFactory_GetRegisteredSignatures_Call) RunAndReturn(run func() []common.Hash) *LogFactory_GetRegisteredSignatures_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessLogs provides a mock function with given fields: _a0, blockNumToHash
func (_m *LogFactory) ProcessLogs(_a0 []types.Log, blockNumToHash map[uint64]common.Hash) ([]logs.LogContainer, error) {
	ret := _m.Called(_a0, blockNumToHash)

	if len(ret) == 0 {
		panic("no return value specified for ProcessLogs")
	}

	var r0 []logs.LogContainer
	var r1 error
	if rf, ok := ret.Get(0).(func([]types.Log, map[uint64]common.Hash) ([]logs.LogContainer, error)); ok {
		return rf(_a0, blockNumToHash)
	}
	if rf, ok := ret.Get(0).(func([]types.Log, map[uint64]common.Hash) []logs.LogContainer); ok {
		r0 = rf(_a0, blockNumToHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]logs.LogContainer)
		}
	}

	if rf, ok := ret.Get(1).(func([]types.Log, map[uint64]common.Hash) error); ok {
		r1 = rf(_a0, blockNumToHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogFactory_ProcessLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessLogs'
type LogFactory_ProcessLogs_Call struct {
	*mock.Call
}

// ProcessLogs is a helper method to define mock.On call
//   - _a0 []types.Log
//   - blockNumToHash map[uint64]common.Hash
func (_e *LogFactory_Expecter) ProcessLogs(_a0 interface{}, blockNumToHash interface{}) *LogFactory_ProcessLogs_Call {
	return &LogFactory_ProcessLogs_Call{Call: _e.mock.On("ProcessLogs", _a0, blockNumToHash)}
}

func (_c *LogFactory_ProcessLogs_Call) Run(run func(_a0 []types.Log, blockNumToHash map[uint64]common.Hash)) *LogFactory_ProcessLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]types.Log), args[1].(map[uint64]common.Hash))
	})
	return _c
}

func (_c *LogFactory_ProcessLogs_Call) Return(_a0 []logs.LogContainer, _a1 error) *LogFactory_ProcessLogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogFactory_ProcessLogs_Call) RunAndReturn(run func([]types.Log, map[uint64]common.Hash) ([]logs.LogContainer, error)) *LogFactory_ProcessLogs_Call {
	_c.Call.Return(run)
	return _c
}

// NewLogFactory creates a new instance of LogFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *LogFactory {
	mock := &LogFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

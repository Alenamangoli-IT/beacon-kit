// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	logs "github.com/itsdevbear/bolaris/beacon/execution/logs"
	mock "github.com/stretchr/testify/mock"
)

// LogCache is an autogenerated mock type for the LogCache type
type LogCache struct {
	mock.Mock
}

type LogCache_Expecter struct {
	mock *mock.Mock
}

func (_m *LogCache) EXPECT() *LogCache_Expecter {
	return &LogCache_Expecter{mock: &_m.Mock}
}

// Insert provides a mock function with given fields: log
func (_m *LogCache) Insert(log logs.LogContainer) error {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(logs.LogContainer) error); ok {
		r0 = rf(log)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LogCache_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type LogCache_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - log logs.LogContainer
func (_e *LogCache_Expecter) Insert(log interface{}) *LogCache_Insert_Call {
	return &LogCache_Insert_Call{Call: _e.mock.On("Insert", log)}
}

func (_c *LogCache_Insert_Call) Run(run func(log logs.LogContainer)) *LogCache_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(logs.LogContainer))
	})
	return _c
}

func (_c *LogCache_Insert_Call) Return(_a0 error) *LogCache_Insert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogCache_Insert_Call) RunAndReturn(run func(logs.LogContainer) error) *LogCache_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// NewLogCache creates a new instance of LogCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *LogCache {
	mock := &LogCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

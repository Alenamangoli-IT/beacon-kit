// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	types "github.com/ethereum/go-ethereum/core/types"
	mock "github.com/stretchr/testify/mock"
)

// LogHandler is an autogenerated mock type for the LogHandler type
type LogHandler struct {
	mock.Mock
}

type LogHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *LogHandler) EXPECT() *LogHandler_Expecter {
	return &LogHandler_Expecter{mock: &_m.Mock}
}

// HandleLog provides a mock function with given fields: ctx, log
func (_m *LogHandler) HandleLog(ctx context.Context, log *types.Log) error {
	ret := _m.Called(ctx, log)

	if len(ret) == 0 {
		panic("no return value specified for HandleLog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Log) error); ok {
		r0 = rf(ctx, log)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LogHandler_HandleLog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleLog'
type LogHandler_HandleLog_Call struct {
	*mock.Call
}

// HandleLog is a helper method to define mock.On call
//   - ctx context.Context
//   - log *types.Log
func (_e *LogHandler_Expecter) HandleLog(ctx interface{}, log interface{}) *LogHandler_HandleLog_Call {
	return &LogHandler_HandleLog_Call{Call: _e.mock.On("HandleLog", ctx, log)}
}

func (_c *LogHandler_HandleLog_Call) Run(run func(ctx context.Context, log *types.Log)) *LogHandler_HandleLog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.Log))
	})
	return _c
}

func (_c *LogHandler_HandleLog_Call) Return(_a0 error) *LogHandler_HandleLog_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogHandler_HandleLog_Call) RunAndReturn(run func(context.Context, *types.Log) error) *LogHandler_HandleLog_Call {
	_c.Call.Return(run)
	return _c
}

// NewLogHandler creates a new instance of LogHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *LogHandler {
	mock := &LogHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

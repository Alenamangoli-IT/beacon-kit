// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package v3

import (
	"encoding/json"
)

// MarshalJSON marshals as JSON.
func (b BlobsBundle) MarshalJSON() ([]byte, error) {
	type BlobsBundle struct {
		KzgCommitments [][]byte `protobuf:"bytes,1,rep,name=kzg_commitments,json=kzgCommitments,proto3" json:"kzgCommitments,omitempty" ssz-max:"16" ssz-size:"?,48"`
		Proofs         [][]byte `protobuf:"bytes,2,rep,name=proofs,proto3" json:"proofs,omitempty" ssz-max:"16" ssz-size:"?,48"`
		Blobs          [][]byte `protobuf:"bytes,3,rep,name=blobs,proto3" json:"blobs,omitempty" ssz-max:"16" ssz-size:"?,131072"`
	}
	var enc BlobsBundle
	enc.KzgCommitments = b.KzgCommitments
	enc.Proofs = b.Proofs
	enc.Blobs = b.Blobs
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (b *BlobsBundle) UnmarshalJSON(input []byte) error {
	type BlobsBundle struct {
		KzgCommitments [][]byte `protobuf:"bytes,1,rep,name=kzg_commitments,json=kzgCommitments,proto3" json:"kzgCommitments,omitempty" ssz-max:"16" ssz-size:"?,48"`
		Proofs         [][]byte `protobuf:"bytes,2,rep,name=proofs,proto3" json:"proofs,omitempty" ssz-max:"16" ssz-size:"?,48"`
		Blobs          [][]byte `protobuf:"bytes,3,rep,name=blobs,proto3" json:"blobs,omitempty" ssz-max:"16" ssz-size:"?,131072"`
	}
	var dec BlobsBundle
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.KzgCommitments != nil {
		b.KzgCommitments = dec.KzgCommitments
	}
	if dec.Proofs != nil {
		b.Proofs = dec.Proofs
	}
	if dec.Blobs != nil {
		b.Blobs = dec.Blobs
	}
	return nil
}

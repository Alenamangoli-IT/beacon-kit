// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package v3

import (
	"encoding/json"
)

// MarshalJSON marshals as JSON.
func (e ExecutionPayloadDenebWithValueAndBlobsBundle) MarshalJSON() ([]byte, error) {
	type ExecutionPayloadDenebWithValueAndBlobsBundle struct {
		Payload               *ExecutionPayloadDeneb `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
		Value                 []byte                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
		BlobsBundle           *BlobsBundle           `protobuf:"bytes,3,opt,name=blobs_bundle,json=blobsBundle,proto3" json:"blobsBundle,omitempty"`
		ShouldOverrideBuilder bool                   `protobuf:"varint,4,opt,name=should_override_builder,json=shouldOverrideBuilder,proto3" json:"shouldOverrideBuilder,omitempty"`
	}
	var enc ExecutionPayloadDenebWithValueAndBlobsBundle
	enc.Payload = e.Payload
	enc.Value = e.Value
	enc.BlobsBundle = e.BlobsBundle
	enc.ShouldOverrideBuilder = e.ShouldOverrideBuilder
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (e *ExecutionPayloadDenebWithValueAndBlobsBundle) UnmarshalJSON(input []byte) error {
	type ExecutionPayloadDenebWithValueAndBlobsBundle struct {
		Payload               *ExecutionPayloadDeneb `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
		Value                 []byte                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
		BlobsBundle           *BlobsBundle           `protobuf:"bytes,3,opt,name=blobs_bundle,json=blobsBundle,proto3" json:"blobsBundle,omitempty"`
		ShouldOverrideBuilder *bool                  `protobuf:"varint,4,opt,name=should_override_builder,json=shouldOverrideBuilder,proto3" json:"shouldOverrideBuilder,omitempty"`
	}
	var dec ExecutionPayloadDenebWithValueAndBlobsBundle
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Payload != nil {
		e.Payload = dec.Payload
	}
	if dec.Value != nil {
		e.Value = dec.Value
	}
	if dec.BlobsBundle != nil {
		e.BlobsBundle = dec.BlobsBundle
	}
	if dec.ShouldOverrideBuilder != nil {
		e.ShouldOverrideBuilder = *dec.ShouldOverrideBuilder
	}
	return nil
}

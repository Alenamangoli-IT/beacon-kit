// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package v1

import (
	"encoding/json"

	"github.com/ethereum/go-ethereum/common/hexutil"
)

// MarshalJSON marshals as JSON.
func (f ForkchoiceState) MarshalJSON() ([]byte, error) {
	type ForkchoiceState struct {
		HeadBlockHash      hexutil.Bytes `protobuf:"bytes,1,opt,name=head_block_hash,json=headBlockHash,proto3" json:"headBlockHash,omitempty" cast-type:"github.com/ethereum/go-ethereum/common/hexutil.Bytes" jsontag:"headBlockHash" ssz-size:"32"`
		SafeBlockHash      hexutil.Bytes `protobuf:"bytes,2,opt,name=safe_block_hash,json=safeBlockHash,proto3" json:"safeBlockHash,omitempty" cast-type:"github.com/ethereum/go-ethereum/common/hexutil.Bytes" ssz-size:"32"`
		FinalizedBlockHash hexutil.Bytes `protobuf:"bytes,3,opt,name=finalized_block_hash,json=finalizedBlockHash,proto3" json:"finalizedBlockHash,omitempty" cast-type:"github.com/ethereum/go-ethereum/common/hexutil.Bytes" ssz-size:"32"`
	}
	var enc ForkchoiceState
	enc.HeadBlockHash = f.HeadBlockHash
	enc.SafeBlockHash = f.SafeBlockHash
	enc.FinalizedBlockHash = f.FinalizedBlockHash
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (f *ForkchoiceState) UnmarshalJSON(input []byte) error {
	type ForkchoiceState struct {
		HeadBlockHash      *hexutil.Bytes `protobuf:"bytes,1,opt,name=head_block_hash,json=headBlockHash,proto3" json:"headBlockHash,omitempty" cast-type:"github.com/ethereum/go-ethereum/common/hexutil.Bytes" jsontag:"headBlockHash" ssz-size:"32"`
		SafeBlockHash      *hexutil.Bytes `protobuf:"bytes,2,opt,name=safe_block_hash,json=safeBlockHash,proto3" json:"safeBlockHash,omitempty" cast-type:"github.com/ethereum/go-ethereum/common/hexutil.Bytes" ssz-size:"32"`
		FinalizedBlockHash *hexutil.Bytes `protobuf:"bytes,3,opt,name=finalized_block_hash,json=finalizedBlockHash,proto3" json:"finalizedBlockHash,omitempty" cast-type:"github.com/ethereum/go-ethereum/common/hexutil.Bytes" ssz-size:"32"`
	}
	var dec ForkchoiceState
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.HeadBlockHash != nil {
		f.HeadBlockHash = *dec.HeadBlockHash
	}
	if dec.SafeBlockHash != nil {
		f.SafeBlockHash = *dec.SafeBlockHash
	}
	if dec.FinalizedBlockHash != nil {
		f.FinalizedBlockHash = *dec.FinalizedBlockHash
	}
	return nil
}

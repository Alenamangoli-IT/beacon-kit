// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// MarshalJSON marshals as JSON.
func (p PayloadStatus) MarshalJSON() ([]byte, error) {
	type PayloadStatus struct {
		Status          PayloadStatus_Status `protobuf:"varint,1,opt,name=status,proto3,enum=types.engine.v1.PayloadStatus_Status" json:"status,omitempty"`
		LatestValidHash []byte               `protobuf:"bytes,2,opt,name=latest_valid_hash,json=latestValidHash,proto3" json:"latestValidHash,omitempty" ssz-size:"32"`
		ValidationError string               `protobuf:"bytes,3,opt,name=validation_error,json=validationError,proto3" json:"validationError,omitempty"`
	}
	var enc PayloadStatus
	enc.Status = p.Status
	enc.LatestValidHash = p.LatestValidHash
	enc.ValidationError = p.ValidationError
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (p *PayloadStatus) UnmarshalJSON(input []byte) error {
	type PayloadStatus struct {
		Status          *PayloadStatus_Status `protobuf:"varint,1,opt,name=status,proto3,enum=types.engine.v1.PayloadStatus_Status" json:"status,omitempty"`
		LatestValidHash []byte                `protobuf:"bytes,2,opt,name=latest_valid_hash,json=latestValidHash,proto3" json:"latestValidHash,omitempty" ssz-size:"32"`
		ValidationError *string               `protobuf:"bytes,3,opt,name=validation_error,json=validationError,proto3" json:"validationError,omitempty"`
	}
	var dec PayloadStatus
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Status != nil {
		p.Status = *dec.Status
	}
	if dec.LatestValidHash != nil {
		p.LatestValidHash = dec.LatestValidHash
	}
	if dec.ValidationError != nil {
		p.ValidationError = *dec.ValidationError
	}
	return nil
}

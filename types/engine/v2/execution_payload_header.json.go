// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// MarshalJSON marshals as JSON.
func (e ExecutionPayloadHeaderCapella) MarshalJSON() ([]byte, error) {
	type ExecutionPayloadHeaderCapella struct {
		ParentHash       []byte `protobuf:"bytes,1,opt,name=parent_hash,json=parentHash,proto3" json:"parentHash,omitempty" ssz-size:"32"`
		FeeRecipient     []byte `protobuf:"bytes,2,opt,name=fee_recipient,json=feeRecipient,proto3" json:"feeRecipient,omitempty" ssz-size:"20"`
		StateRoot        []byte `protobuf:"bytes,3,opt,name=state_root,json=stateRoot,proto3" json:"stateRoot,omitempty" ssz-size:"32"`
		ReceiptsRoot     []byte `protobuf:"bytes,4,opt,name=receipts_root,json=receiptsRoot,proto3" json:"receiptsRoot,omitempty" ssz-size:"32"`
		LogsBloom        []byte `protobuf:"bytes,5,opt,name=logs_bloom,json=logsBloom,proto3" json:"logsBloom,omitempty" ssz-size:"256"`
		PrevRandao       []byte `protobuf:"bytes,6,opt,name=prev_randao,json=prevRandao,proto3" json:"prevRandao,omitempty" ssz-size:"32"`
		BlockNumber      uint64 `protobuf:"varint,7,opt,name=block_number,json=blockNumber,proto3" json:"blockNumber,omitempty"`
		GasLimit         uint64 `protobuf:"varint,8,opt,name=gas_limit,json=gasLimit,proto3" json:"gasLimit,omitempty"`
		GasUsed          uint64 `protobuf:"varint,9,opt,name=gas_used,json=gasUsed,proto3" json:"gasUsed,omitempty"`
		Timestamp        uint64 `protobuf:"varint,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
		ExtraData        []byte `protobuf:"bytes,11,opt,name=extra_data,json=extraData,proto3" json:"extraData,omitempty" ssz-max:"32"`
		BaseFeePerGas    []byte `protobuf:"bytes,12,opt,name=base_fee_per_gas,json=baseFeePerGas,proto3" json:"baseFeePerGas,omitempty" ssz-size:"32"`
		BlockHash        []byte `protobuf:"bytes,13,opt,name=block_hash,json=blockHash,proto3" json:"blockHash,omitempty" ssz-size:"32"`
		TransactionsRoot []byte `protobuf:"bytes,14,opt,name=transactions_root,json=transactionsRoot,proto3" json:"transactionsRoot,omitempty" ssz-size:"32"`
		WithdrawalsRoot  []byte `protobuf:"bytes,15,opt,name=withdrawals_root,json=withdrawalsRoot,proto3" json:"withdrawalsRoot,omitempty" ssz-size:"32"`
	}
	var enc ExecutionPayloadHeaderCapella
	enc.ParentHash = e.ParentHash
	enc.FeeRecipient = e.FeeRecipient
	enc.StateRoot = e.StateRoot
	enc.ReceiptsRoot = e.ReceiptsRoot
	enc.LogsBloom = e.LogsBloom
	enc.PrevRandao = e.PrevRandao
	enc.BlockNumber = e.BlockNumber
	enc.GasLimit = e.GasLimit
	enc.GasUsed = e.GasUsed
	enc.Timestamp = e.Timestamp
	enc.ExtraData = e.ExtraData
	enc.BaseFeePerGas = e.BaseFeePerGas
	enc.BlockHash = e.BlockHash
	enc.TransactionsRoot = e.TransactionsRoot
	enc.WithdrawalsRoot = e.WithdrawalsRoot
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (e *ExecutionPayloadHeaderCapella) UnmarshalJSON(input []byte) error {
	type ExecutionPayloadHeaderCapella struct {
		ParentHash       []byte  `protobuf:"bytes,1,opt,name=parent_hash,json=parentHash,proto3" json:"parentHash,omitempty" ssz-size:"32"`
		FeeRecipient     []byte  `protobuf:"bytes,2,opt,name=fee_recipient,json=feeRecipient,proto3" json:"feeRecipient,omitempty" ssz-size:"20"`
		StateRoot        []byte  `protobuf:"bytes,3,opt,name=state_root,json=stateRoot,proto3" json:"stateRoot,omitempty" ssz-size:"32"`
		ReceiptsRoot     []byte  `protobuf:"bytes,4,opt,name=receipts_root,json=receiptsRoot,proto3" json:"receiptsRoot,omitempty" ssz-size:"32"`
		LogsBloom        []byte  `protobuf:"bytes,5,opt,name=logs_bloom,json=logsBloom,proto3" json:"logsBloom,omitempty" ssz-size:"256"`
		PrevRandao       []byte  `protobuf:"bytes,6,opt,name=prev_randao,json=prevRandao,proto3" json:"prevRandao,omitempty" ssz-size:"32"`
		BlockNumber      *uint64 `protobuf:"varint,7,opt,name=block_number,json=blockNumber,proto3" json:"blockNumber,omitempty"`
		GasLimit         *uint64 `protobuf:"varint,8,opt,name=gas_limit,json=gasLimit,proto3" json:"gasLimit,omitempty"`
		GasUsed          *uint64 `protobuf:"varint,9,opt,name=gas_used,json=gasUsed,proto3" json:"gasUsed,omitempty"`
		Timestamp        *uint64 `protobuf:"varint,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
		ExtraData        []byte  `protobuf:"bytes,11,opt,name=extra_data,json=extraData,proto3" json:"extraData,omitempty" ssz-max:"32"`
		BaseFeePerGas    []byte  `protobuf:"bytes,12,opt,name=base_fee_per_gas,json=baseFeePerGas,proto3" json:"baseFeePerGas,omitempty" ssz-size:"32"`
		BlockHash        []byte  `protobuf:"bytes,13,opt,name=block_hash,json=blockHash,proto3" json:"blockHash,omitempty" ssz-size:"32"`
		TransactionsRoot []byte  `protobuf:"bytes,14,opt,name=transactions_root,json=transactionsRoot,proto3" json:"transactionsRoot,omitempty" ssz-size:"32"`
		WithdrawalsRoot  []byte  `protobuf:"bytes,15,opt,name=withdrawals_root,json=withdrawalsRoot,proto3" json:"withdrawalsRoot,omitempty" ssz-size:"32"`
	}
	var dec ExecutionPayloadHeaderCapella
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.ParentHash != nil {
		e.ParentHash = dec.ParentHash
	}
	if dec.FeeRecipient != nil {
		e.FeeRecipient = dec.FeeRecipient
	}
	if dec.StateRoot != nil {
		e.StateRoot = dec.StateRoot
	}
	if dec.ReceiptsRoot != nil {
		e.ReceiptsRoot = dec.ReceiptsRoot
	}
	if dec.LogsBloom != nil {
		e.LogsBloom = dec.LogsBloom
	}
	if dec.PrevRandao != nil {
		e.PrevRandao = dec.PrevRandao
	}
	if dec.BlockNumber != nil {
		e.BlockNumber = *dec.BlockNumber
	}
	if dec.GasLimit != nil {
		e.GasLimit = *dec.GasLimit
	}
	if dec.GasUsed != nil {
		e.GasUsed = *dec.GasUsed
	}
	if dec.Timestamp != nil {
		e.Timestamp = *dec.Timestamp
	}
	if dec.ExtraData != nil {
		e.ExtraData = dec.ExtraData
	}
	if dec.BaseFeePerGas != nil {
		e.BaseFeePerGas = dec.BaseFeePerGas
	}
	if dec.BlockHash != nil {
		e.BlockHash = dec.BlockHash
	}
	if dec.TransactionsRoot != nil {
		e.TransactionsRoot = dec.TransactionsRoot
	}
	if dec.WithdrawalsRoot != nil {
		e.WithdrawalsRoot = dec.WithdrawalsRoot
	}
	return nil
}

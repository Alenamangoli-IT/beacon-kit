// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// MarshalJSON marshals as JSON.
func (e ExecutionPayloadCapellaWithValue) MarshalJSON() ([]byte, error) {
	type ExecutionPayloadCapellaWithValue struct {
		Payload *ExecutionPayloadCapella `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
		Value   []byte                   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	}
	var enc ExecutionPayloadCapellaWithValue
	enc.Payload = e.Payload
	enc.Value = e.Value
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (e *ExecutionPayloadCapellaWithValue) UnmarshalJSON(input []byte) error {
	type ExecutionPayloadCapellaWithValue struct {
		Payload *ExecutionPayloadCapella `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
		Value   []byte                   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	}
	var dec ExecutionPayloadCapellaWithValue
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Payload != nil {
		e.Payload = dec.Payload
	}
	if dec.Value != nil {
		e.Value = dec.Value
	}
	return nil
}

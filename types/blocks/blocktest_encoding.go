// Code generated by fastssz. DO NOT EDIT.
// Hash: a50811c43976a9ddb1e310e7e4dddbaefef9a6f44749c2efd11ebe87190c0d19
package blocks

import (
	ssz "github.com/prysmaticlabs/fastssz"
	 enginev1 "github.com/prysmaticlabs/prysm/v4/proto/engine/v1"
)

// MarshalSSZ ssz marshals the ExecutionPayloadCapella object
func (e *ExecutionPayloadCapella) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(e)
}

// MarshalSSZTo ssz marshals the ExecutionPayloadCapella object to a target array
func (e *ExecutionPayloadCapella) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	return
}

// UnmarshalSSZ ssz unmarshals the ExecutionPayloadCapella object
func (e *ExecutionPayloadCapella) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 0 {
		return ssz.ErrSize
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ExecutionPayloadCapella object
func (e *ExecutionPayloadCapella) SizeSSZ() (size int) {
	size = 0
	return
}

// HashTreeRoot ssz hashes the ExecutionPayloadCapella object
func (e *ExecutionPayloadCapella) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(e)
}

// HashTreeRootWith ssz hashes the ExecutionPayloadCapella object with a hasher
func (e *ExecutionPayloadCapella) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	if ssz.EnableVectorizedHTR {
		hh.MerkleizeVectorizedHTR(indx)
	} else {
		hh.Merkleize(indx)
	}
	return
}

// MarshalSSZ ssz marshals the FunBlock object
func (f *FunBlock) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(f)
}

// MarshalSSZTo ssz marshals the FunBlock object to a target array
func (f *FunBlock) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Henlo'
	if size := len(f.Henlo); size != 32 {
		err = ssz.ErrBytesLengthFn("--.Henlo", size, 32)
		return
	}
	dst = append(dst, f.Henlo...)

	// Field (1) 'ExecutionPayload'
	if f.ExecutionPayload == nil {
		f.ExecutionPayload = new(enginev1.ExecutionPayloadCapella)
	}
	
	if dst, err = f.ExecutionPayload.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the FunBlock object
func (f *FunBlock) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 576 {
		return ssz.ErrSize
	}

	// Field (0) 'Henlo'
	if cap(f.Henlo) == 0 {
		f.Henlo = make([]byte, 0, len(buf[0:32]))
	}
	f.Henlo = append(f.Henlo, buf[0:32]...)

	// Field (1) 'ExecutionPayload'
	if f.ExecutionPayload == nil {
		f.ExecutionPayload = new(enginev1.ExecutionPayloadCapella)
	}
	if err = f.ExecutionPayload.UnmarshalSSZ(buf[32:576]); err != nil {
		return err
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the FunBlock object
func (f *FunBlock) SizeSSZ() (size int) {
	size = 32
	return
}

// HashTreeRoot ssz hashes the FunBlock object
func (f *FunBlock) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(f)
}

// HashTreeRootWith ssz hashes the FunBlock object with a hasher
func (f *FunBlock) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Henlo'
	if size := len(f.Henlo); size != 32 {
		err = ssz.ErrBytesLengthFn("--.Henlo", size, 32)
		return
	}
	hh.PutBytes(f.Henlo)

	// Field (1) 'ExecutionPayload'
	if err = f.ExecutionPayload.HashTreeRootWith(hh); err != nil {
		return
	}

	if ssz.EnableVectorizedHTR {
		hh.MerkleizeVectorizedHTR(indx)
	} else {
		hh.Merkleize(indx)
	}
	return
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/consensus/v1/block.proto

package v1

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BeaconKitBlock represents a generic beacon block that can be used to represent
// any beacon block in the system.
type BeaconKitBlock struct {
	// Beacon chain slot that this block represents.
	Slot uint64 `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	// BeaconBlockBody contains the body of the beacon block.
	//
	// Types that are valid to be assigned to Body:
	//
	//	*BeaconKitBlock_BlockBodyGeneric
	Body isBeaconKitBlock_Body `protobuf_oneof:"body"`
	// The payload value of the block.
	PayloadValue string `protobuf:"bytes,101,opt,name=payload_value,json=payloadValue,proto3" json:"payload_value,omitempty"`
}

func (m *BeaconKitBlock) Reset()         { *m = BeaconKitBlock{} }
func (m *BeaconKitBlock) String() string { return proto.CompactTextString(m) }
func (*BeaconKitBlock) ProtoMessage()    {}
func (*BeaconKitBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_b29fa1ac1aaec767, []int{0}
}
func (m *BeaconKitBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BeaconKitBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BeaconKitBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BeaconKitBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeaconKitBlock.Merge(m, src)
}
func (m *BeaconKitBlock) XXX_Size() int {
	return m.Size()
}
func (m *BeaconKitBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_BeaconKitBlock.DiscardUnknown(m)
}

var xxx_messageInfo_BeaconKitBlock proto.InternalMessageInfo

type isBeaconKitBlock_Body interface {
	isBeaconKitBlock_Body()
	MarshalTo([]byte) (int, error)
	Size() int
}

type BeaconKitBlock_BlockBodyGeneric struct {
	BlockBodyGeneric *BeaconBlockBody `protobuf:"bytes,2,opt,name=block_body_generic,json=blockBodyGeneric,proto3,oneof" json:"block_body_generic,omitempty"`
}

func (*BeaconKitBlock_BlockBodyGeneric) isBeaconKitBlock_Body() {}

func (m *BeaconKitBlock) GetBody() isBeaconKitBlock_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *BeaconKitBlock) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *BeaconKitBlock) GetBlockBodyGeneric() *BeaconBlockBody {
	if x, ok := m.GetBody().(*BeaconKitBlock_BlockBodyGeneric); ok {
		return x.BlockBodyGeneric
	}
	return nil
}

func (m *BeaconKitBlock) GetPayloadValue() string {
	if m != nil {
		return m.PayloadValue
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BeaconKitBlock) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BeaconKitBlock_BlockBodyGeneric)(nil),
	}
}

// BeaconBlockBody represents the body of a beacon block.
type BeaconBlockBody struct {
	// The validators RANDAO reveal 96 byte value.
	RandaoReveal []byte `protobuf:"bytes,1,opt,name=randao_reveal,json=randaoReveal,proto3" json:"randao_reveal,omitempty"`
	// 32 byte field of arbitrary data. This field may contain any data and
	// is not used for anything other than a fun message.
	Graffiti []byte `protobuf:"bytes,2,opt,name=graffiti,proto3" json:"graffiti,omitempty"`
	// Execution payload from the execution chain. New in Bellatrix network upgrade.
	ExecutionPayload []byte `protobuf:"bytes,3,opt,name=execution_payload,json=executionPayload,proto3" json:"execution_payload,omitempty"`
	// TODO: DEPRECATE WHEN WE BREAK OUT INTO MULTIPLE MESSAGES PER FORK.
	Version int64 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *BeaconBlockBody) Reset()         { *m = BeaconBlockBody{} }
func (m *BeaconBlockBody) String() string { return proto.CompactTextString(m) }
func (*BeaconBlockBody) ProtoMessage()    {}
func (*BeaconBlockBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_b29fa1ac1aaec767, []int{1}
}
func (m *BeaconBlockBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BeaconBlockBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BeaconBlockBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BeaconBlockBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeaconBlockBody.Merge(m, src)
}
func (m *BeaconBlockBody) XXX_Size() int {
	return m.Size()
}
func (m *BeaconBlockBody) XXX_DiscardUnknown() {
	xxx_messageInfo_BeaconBlockBody.DiscardUnknown(m)
}

var xxx_messageInfo_BeaconBlockBody proto.InternalMessageInfo

func (m *BeaconBlockBody) GetRandaoReveal() []byte {
	if m != nil {
		return m.RandaoReveal
	}
	return nil
}

func (m *BeaconBlockBody) GetGraffiti() []byte {
	if m != nil {
		return m.Graffiti
	}
	return nil
}

func (m *BeaconBlockBody) GetExecutionPayload() []byte {
	if m != nil {
		return m.ExecutionPayload
	}
	return nil
}

func (m *BeaconBlockBody) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func init() {
	proto.RegisterType((*BeaconKitBlock)(nil), "types.consensus.v1.BeaconKitBlock")
	proto.RegisterType((*BeaconBlockBody)(nil), "types.consensus.v1.BeaconBlockBody")
}

func init() { proto.RegisterFile("types/consensus/v1/block.proto", fileDescriptor_b29fa1ac1aaec767) }

var fileDescriptor_b29fa1ac1aaec767 = []byte{
	// 334 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0x31, 0x4e, 0xeb, 0x40,
	0x10, 0x86, 0xbd, 0x2f, 0x56, 0xde, 0x7b, 0x8b, 0x81, 0xb0, 0x95, 0x45, 0x61, 0x59, 0x49, 0x63,
	0x09, 0xc9, 0x26, 0x70, 0x03, 0x37, 0x20, 0x68, 0x90, 0x91, 0x28, 0x68, 0xac, 0xb5, 0x3d, 0x09,
	0x2b, 0x8c, 0x27, 0xda, 0x5d, 0x5b, 0xf8, 0x16, 0xb4, 0x5c, 0x80, 0xb3, 0x50, 0xa6, 0xa4, 0x44,
	0xc9, 0x45, 0x90, 0xd7, 0x49, 0x0a, 0xd2, 0xed, 0x7c, 0xff, 0xec, 0x37, 0x23, 0x0d, 0xf5, 0x74,
	0xbb, 0x00, 0x15, 0xe5, 0x58, 0x29, 0xa8, 0x54, 0xad, 0xa2, 0x66, 0x1a, 0x65, 0x25, 0xe6, 0xcf,
	0xe1, 0x42, 0xa2, 0x46, 0xc6, 0x4c, 0x1e, 0xee, 0xf2, 0xb0, 0x99, 0x8e, 0x3f, 0x08, 0x3d, 0x8a,
	0x81, 0xe7, 0x58, 0xdd, 0x0a, 0x1d, 0x77, 0xcd, 0x8c, 0x51, 0x5b, 0x95, 0xa8, 0x5d, 0xe2, 0x93,
	0xc0, 0x4e, 0xcc, 0x9b, 0xdd, 0x53, 0x66, 0x4c, 0x69, 0x86, 0x45, 0x9b, 0xce, 0xa1, 0x02, 0x29,
	0x72, 0xf7, 0x8f, 0x4f, 0x82, 0x83, 0x8b, 0x49, 0xb8, 0xef, 0x0d, 0x7b, 0xa7, 0x11, 0xc6, 0x58,
	0xb4, 0xd7, 0x56, 0x32, 0xca, 0xb6, 0xc5, 0x55, 0xff, 0x9d, 0x4d, 0xe8, 0xe1, 0x82, 0xb7, 0x25,
	0xf2, 0x22, 0x6d, 0x78, 0x59, 0x83, 0x0b, 0x3e, 0x09, 0xfe, 0x27, 0xce, 0x06, 0x3e, 0x74, 0x2c,
	0x1e, 0x52, 0xbb, 0x9b, 0x39, 0x7e, 0x27, 0xf4, 0xf8, 0x97, 0xb4, 0x13, 0x48, 0x5e, 0x15, 0x1c,
	0x53, 0x09, 0x0d, 0xf0, 0xd2, 0xac, 0xec, 0x24, 0x4e, 0x0f, 0x13, 0xc3, 0xd8, 0x29, 0xfd, 0x37,
	0x97, 0x7c, 0x36, 0x13, 0x5a, 0x98, 0x85, 0x9d, 0x64, 0x57, 0xb3, 0x33, 0x7a, 0x02, 0xaf, 0x90,
	0xd7, 0x5a, 0x60, 0x95, 0x6e, 0xc6, 0xba, 0x03, 0xd3, 0x34, 0xda, 0x05, 0x77, 0x3d, 0x67, 0x2e,
	0xfd, 0xdb, 0x80, 0x54, 0x02, 0x2b, 0xd7, 0xf6, 0x49, 0x30, 0x48, 0xb6, 0x65, 0x7c, 0xf3, 0xb9,
	0xf2, 0xc8, 0x72, 0xe5, 0x91, 0xef, 0x95, 0x47, 0xde, 0xd6, 0x9e, 0xb5, 0x5c, 0x7b, 0xd6, 0xd7,
	0xda, 0xb3, 0x1e, 0xcf, 0xe7, 0x42, 0x3f, 0xd5, 0x59, 0x98, 0xe3, 0x4b, 0x24, 0xb4, 0x2a, 0xa0,
	0xc9, 0x80, 0xcb, 0x28, 0xc3, 0x92, 0x4b, 0xa1, 0xa2, 0xfd, 0x83, 0x65, 0x43, 0x73, 0xab, 0xcb,
	0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x25, 0x07, 0x48, 0xe7, 0xcd, 0x01, 0x00, 0x00,
}

func (m *BeaconKitBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeaconKitBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BeaconKitBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PayloadValue) > 0 {
		i -= len(m.PayloadValue)
		copy(dAtA[i:], m.PayloadValue)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.PayloadValue)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if m.Body != nil {
		{
			size := m.Body.Size()
			i -= size
			if _, err := m.Body.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Slot != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.Slot))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BeaconKitBlock_BlockBodyGeneric) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BeaconKitBlock_BlockBodyGeneric) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockBodyGeneric != nil {
		{
			size, err := m.BlockBodyGeneric.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *BeaconBlockBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeaconBlockBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BeaconBlockBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ExecutionPayload) > 0 {
		i -= len(m.ExecutionPayload)
		copy(dAtA[i:], m.ExecutionPayload)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.ExecutionPayload)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Graffiti) > 0 {
		i -= len(m.Graffiti)
		copy(dAtA[i:], m.Graffiti)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Graffiti)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RandaoReveal) > 0 {
		i -= len(m.RandaoReveal)
		copy(dAtA[i:], m.RandaoReveal)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.RandaoReveal)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBlock(dAtA []byte, offset int, v uint64) int {
	offset -= sovBlock(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BeaconKitBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slot != 0 {
		n += 1 + sovBlock(uint64(m.Slot))
	}
	if m.Body != nil {
		n += m.Body.Size()
	}
	l = len(m.PayloadValue)
	if l > 0 {
		n += 2 + l + sovBlock(uint64(l))
	}
	return n
}

func (m *BeaconKitBlock_BlockBodyGeneric) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockBodyGeneric != nil {
		l = m.BlockBodyGeneric.Size()
		n += 1 + l + sovBlock(uint64(l))
	}
	return n
}
func (m *BeaconBlockBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RandaoReveal)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.Graffiti)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.ExecutionPayload)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovBlock(uint64(m.Version))
	}
	return n
}

func sovBlock(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBlock(x uint64) (n int) {
	return sovBlock(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BeaconKitBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeaconKitBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeaconKitBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockBodyGeneric", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BeaconBlockBody{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &BeaconKitBlock_BlockBodyGeneric{v}
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayloadValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayloadValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeaconBlockBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeaconBlockBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeaconBlockBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandaoReveal", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RandaoReveal = append(m.RandaoReveal[:0], dAtA[iNdEx:postIndex]...)
			if m.RandaoReveal == nil {
				m.RandaoReveal = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Graffiti", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Graffiti = append(m.Graffiti[:0], dAtA[iNdEx:postIndex]...)
			if m.Graffiti == nil {
				m.Graffiti = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutionPayload = append(m.ExecutionPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.ExecutionPayload == nil {
				m.ExecutionPayload = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBlock(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBlock
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBlock
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBlock
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBlock        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBlock          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBlock = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by fastssz. DO NOT EDIT.
// Hash: 0da3500148978b4e74a9be441611b814d0ec737bfd107ed5aa3e25584d60d4c4
package v1

import (
	ssz "github.com/prysmaticlabs/fastssz"
)

// MarshalSSZ ssz marshals the BeaconKitBlock object
func (b *BeaconKitBlock) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the BeaconKitBlock object to a target array
func (b *BeaconKitBlock) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(16)

	// Field (0) 'Slot'
	dst = ssz.MarshalUint64(dst, b.Slot)

	// Offset (1) 'BlockBodyGeneric'
	dst = ssz.WriteOffset(dst, offset)
	if b.BlockBodyGeneric == nil {
		b.BlockBodyGeneric = new(BeaconBlockBody)
	}
	offset += b.BlockBodyGeneric.SizeSSZ()

	// Offset (2) 'PayloadValue'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(b.PayloadValue)

	// Field (1) 'BlockBodyGeneric'
	if dst, err = b.BlockBodyGeneric.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (2) 'PayloadValue'
	if size := len(b.PayloadValue); size > 256 {
		err = ssz.ErrBytesLengthFn("--.PayloadValue", size, 256)
		return
	}
	dst = append(dst, b.PayloadValue...)

	return
}

// UnmarshalSSZ ssz unmarshals the BeaconKitBlock object
func (b *BeaconKitBlock) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 16 {
		return ssz.ErrSize
	}

	tail := buf
	var o1, o2 uint64

	// Field (0) 'Slot'
	b.Slot = ssz.UnmarshallUint64(buf[0:8])

	// Offset (1) 'BlockBodyGeneric'
	if o1 = ssz.ReadOffset(buf[8:12]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 < 16 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (2) 'PayloadValue'
	if o2 = ssz.ReadOffset(buf[12:16]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Field (1) 'BlockBodyGeneric'
	{
		buf = tail[o1:o2]
		if b.BlockBodyGeneric == nil {
			b.BlockBodyGeneric = new(BeaconBlockBody)
		}
		if err = b.BlockBodyGeneric.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (2) 'PayloadValue'
	{
		buf = tail[o2:]
		if len(buf) > 256 {
			return ssz.ErrBytesLength
		}
		if cap(b.PayloadValue) == 0 {
			b.PayloadValue = make([]byte, 0, len(buf))
		}
		b.PayloadValue = append(b.PayloadValue, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the BeaconKitBlock object
func (b *BeaconKitBlock) SizeSSZ() (size int) {
	size = 16

	// Field (1) 'BlockBodyGeneric'
	if b.BlockBodyGeneric == nil {
		b.BlockBodyGeneric = new(BeaconBlockBody)
	}
	size += b.BlockBodyGeneric.SizeSSZ()

	// Field (2) 'PayloadValue'
	size += len(b.PayloadValue)

	return
}

// HashTreeRoot ssz hashes the BeaconKitBlock object
func (b *BeaconKitBlock) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the BeaconKitBlock object with a hasher
func (b *BeaconKitBlock) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Slot'
	hh.PutUint64(b.Slot)

	// Field (1) 'BlockBodyGeneric'
	if err = b.BlockBodyGeneric.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (2) 'PayloadValue'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(b.PayloadValue))
		if byteLen > 256 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.PutBytes(b.PayloadValue)
		if ssz.EnableVectorizedHTR {
			hh.MerkleizeWithMixinVectorizedHTR(elemIndx, byteLen, (256+31)/32)
		} else {
			hh.MerkleizeWithMixin(elemIndx, byteLen, (256+31)/32)
		}
	}

	if ssz.EnableVectorizedHTR {
		hh.MerkleizeVectorizedHTR(indx)
	} else {
		hh.Merkleize(indx)
	}
	return
}

// MarshalSSZ ssz marshals the BeaconBlockBody object
func (b *BeaconBlockBody) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the BeaconBlockBody object to a target array
func (b *BeaconBlockBody) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(76)

	// Field (0) 'RandaoReveal'
	if size := len(b.RandaoReveal); size != 32 {
		err = ssz.ErrBytesLengthFn("--.RandaoReveal", size, 32)
		return
	}
	dst = append(dst, b.RandaoReveal...)

	// Field (1) 'Graffiti'
	if size := len(b.Graffiti); size != 32 {
		err = ssz.ErrBytesLengthFn("--.Graffiti", size, 32)
		return
	}
	dst = append(dst, b.Graffiti...)

	// Field (2) 'Version'
	if size := len(b.Version); size != 8 {
		err = ssz.ErrBytesLengthFn("--.Version", size, 8)
		return
	}
	dst = append(dst, b.Version...)

	// Offset (3) 'ExecutionPayload'
	dst = ssz.WriteOffset(dst, offset)
	if b.ExecutionPayload == nil {
		b.ExecutionPayload = new(ExecutionPayloadCapella)
	}
	offset += b.ExecutionPayload.SizeSSZ()

	// Field (3) 'ExecutionPayload'
	if dst, err = b.ExecutionPayload.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the BeaconBlockBody object
func (b *BeaconBlockBody) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 76 {
		return ssz.ErrSize
	}

	tail := buf
	var o3 uint64

	// Field (0) 'RandaoReveal'
	if cap(b.RandaoReveal) == 0 {
		b.RandaoReveal = make([]byte, 0, len(buf[0:32]))
	}
	b.RandaoReveal = append(b.RandaoReveal, buf[0:32]...)

	// Field (1) 'Graffiti'
	if cap(b.Graffiti) == 0 {
		b.Graffiti = make([]byte, 0, len(buf[32:64]))
	}
	b.Graffiti = append(b.Graffiti, buf[32:64]...)

	// Field (2) 'Version'
	if cap(b.Version) == 0 {
		b.Version = make([]byte, 0, len(buf[64:72]))
	}
	b.Version = append(b.Version, buf[64:72]...)

	// Offset (3) 'ExecutionPayload'
	if o3 = ssz.ReadOffset(buf[72:76]); o3 > size {
		return ssz.ErrOffset
	}

	if o3 < 76 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (3) 'ExecutionPayload'
	{
		buf = tail[o3:]
		if b.ExecutionPayload == nil {
			b.ExecutionPayload = new(ExecutionPayloadCapella)
		}
		if err = b.ExecutionPayload.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the BeaconBlockBody object
func (b *BeaconBlockBody) SizeSSZ() (size int) {
	size = 76

	// Field (3) 'ExecutionPayload'
	if b.ExecutionPayload == nil {
		b.ExecutionPayload = new(ExecutionPayloadCapella)
	}
	size += b.ExecutionPayload.SizeSSZ()

	return
}

// HashTreeRoot ssz hashes the BeaconBlockBody object
func (b *BeaconBlockBody) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the BeaconBlockBody object with a hasher
func (b *BeaconBlockBody) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'RandaoReveal'
	if size := len(b.RandaoReveal); size != 32 {
		err = ssz.ErrBytesLengthFn("--.RandaoReveal", size, 32)
		return
	}
	hh.PutBytes(b.RandaoReveal)

	// Field (1) 'Graffiti'
	if size := len(b.Graffiti); size != 32 {
		err = ssz.ErrBytesLengthFn("--.Graffiti", size, 32)
		return
	}
	hh.PutBytes(b.Graffiti)

	// Field (2) 'Version'
	if size := len(b.Version); size != 8 {
		err = ssz.ErrBytesLengthFn("--.Version", size, 8)
		return
	}
	hh.PutBytes(b.Version)

	// Field (3) 'ExecutionPayload'
	if err = b.ExecutionPayload.HashTreeRootWith(hh); err != nil {
		return
	}

	if ssz.EnableVectorizedHTR {
		hh.MerkleizeVectorizedHTR(indx)
	} else {
		hh.Merkleize(indx)
	}
	return
}
